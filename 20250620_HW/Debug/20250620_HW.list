
20250620_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aac  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c44  08000c44  00001c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c50  08000c50  000020a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000c50  08000c50  000020a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000c50  08000c50  000020a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c50  08000c50  00001c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c54  08000c54  00001c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08000c58  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200000a0  08000cf8  000020a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08000cf8  000020ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c3d  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b8d  00000000  00000000  00003d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  000048a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000181  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e2e9  00000000  00000000  00004c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000034e8  00000000  00000000  00012f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000500c9  00000000  00000000  00016432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000664fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000680  00000000  00000000  00066540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00066bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000c2c 	.word	0x08000c2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08000c2c 	.word	0x08000c2c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <TIM2_IRQHandler>:
button_handler_t hBtnA;
button_handler_t hBtnB;
button_handler_t hBtnC;

void TIM2_IRQHandler(void) // 인터럽트 함수 Startup가보면 인터럽트벡터등 이름이 명시되어 있음
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	incTick();
 8000218:	f000 fbea 	bl	80009f0 <incTick>
	FND_DisplayData();
 800021c:	f000 fae2 	bl	80007e4 <FND_DisplayData>
	TIM_ClearUIF(TIM2);
 8000220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000224:	f000 fc52 	bl	8000acc <TIM_ClearUIF>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <ap_main>:

int ap_main()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b08a      	sub	sp, #40	@ 0x28
 8000230:	af00      	add	r7, sp, #0
	clock_type clock;
	stopwatch_type stopwatch;
	uint32_t ap_state = START;
 8000232:	2300      	movs	r3, #0
 8000234:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t SW_run = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	623b      	str	r3, [r7, #32]
	uint32_t dp = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
	clock.msec = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	81bb      	strh	r3, [r7, #12]
	clock.sec = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	81fb      	strh	r3, [r7, #14]
	clock.min = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	823b      	strh	r3, [r7, #16]
	stopwatch.msec = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	80bb      	strh	r3, [r7, #4]
	stopwatch.sec = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	80fb      	strh	r3, [r7, #6]
	stopwatch.min = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	813b      	strh	r3, [r7, #8]
	uint32_t prevCNT_clock = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	61bb      	str	r3, [r7, #24]
	uint32_t prevCNT_SW = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

	while (1) {
		if(getTick() - prevCNT_clock >= 100) {
 800025e:	f000 fbbb 	bl	80009d8 <getTick>
 8000262:	4602      	mov	r2, r0
 8000264:	69bb      	ldr	r3, [r7, #24]
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	2b63      	cmp	r3, #99	@ 0x63
 800026a:	d91d      	bls.n	80002a8 <ap_main+0x7c>
			prevCNT_clock = getTick();
 800026c:	f000 fbb4 	bl	80009d8 <getTick>
 8000270:	61b8      	str	r0, [r7, #24]
			clock.msec++;
 8000272:	89bb      	ldrh	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	b29b      	uxth	r3, r3
 8000278:	81bb      	strh	r3, [r7, #12]

			if(clock.msec == 10){
 800027a:	89bb      	ldrh	r3, [r7, #12]
 800027c:	2b0a      	cmp	r3, #10
 800027e:	d105      	bne.n	800028c <ap_main+0x60>
				clock.msec = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	81bb      	strh	r3, [r7, #12]
				clock.sec++;
 8000284:	89fb      	ldrh	r3, [r7, #14]
 8000286:	3301      	adds	r3, #1
 8000288:	b29b      	uxth	r3, r3
 800028a:	81fb      	strh	r3, [r7, #14]
			}
			if(clock.sec == 60){
 800028c:	89fb      	ldrh	r3, [r7, #14]
 800028e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000290:	d105      	bne.n	800029e <ap_main+0x72>
				clock.sec = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	81fb      	strh	r3, [r7, #14]
				clock.min++;
 8000296:	8a3b      	ldrh	r3, [r7, #16]
 8000298:	3301      	adds	r3, #1
 800029a:	b29b      	uxth	r3, r3
 800029c:	823b      	strh	r3, [r7, #16]
			}
			if(clock.min == 60){
 800029e:	8a3b      	ldrh	r3, [r7, #16]
 80002a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80002a2:	d101      	bne.n	80002a8 <ap_main+0x7c>
				clock.min = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	823b      	strh	r3, [r7, #16]
			}
		}
		if(SW_run && getTick() - prevCNT_SW >= 100) {
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d024      	beq.n	80002f8 <ap_main+0xcc>
 80002ae:	f000 fb93 	bl	80009d8 <getTick>
 80002b2:	4602      	mov	r2, r0
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	2b63      	cmp	r3, #99	@ 0x63
 80002ba:	d91d      	bls.n	80002f8 <ap_main+0xcc>
			prevCNT_SW = getTick();
 80002bc:	f000 fb8c 	bl	80009d8 <getTick>
 80002c0:	6178      	str	r0, [r7, #20]
			stopwatch.msec ++;
 80002c2:	88bb      	ldrh	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	80bb      	strh	r3, [r7, #4]

			if(stopwatch.msec == 10){
 80002ca:	88bb      	ldrh	r3, [r7, #4]
 80002cc:	2b0a      	cmp	r3, #10
 80002ce:	d105      	bne.n	80002dc <ap_main+0xb0>
				stopwatch.msec = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	80bb      	strh	r3, [r7, #4]
				stopwatch.sec++;
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b29b      	uxth	r3, r3
 80002da:	80fb      	strh	r3, [r7, #6]
			}
			if(stopwatch.sec == 60){
 80002dc:	88fb      	ldrh	r3, [r7, #6]
 80002de:	2b3c      	cmp	r3, #60	@ 0x3c
 80002e0:	d105      	bne.n	80002ee <ap_main+0xc2>
				stopwatch.sec = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	80fb      	strh	r3, [r7, #6]
				stopwatch.min++;
 80002e6:	893b      	ldrh	r3, [r7, #8]
 80002e8:	3301      	adds	r3, #1
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	813b      	strh	r3, [r7, #8]
			}
			if(stopwatch.min == 60){
 80002ee:	893b      	ldrh	r3, [r7, #8]
 80002f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80002f2:	d101      	bne.n	80002f8 <ap_main+0xcc>
				stopwatch.min = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	813b      	strh	r3, [r7, #8]
			}
		}
		dp = 0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	61fb      	str	r3, [r7, #28]

		switch (ap_state) {
 80002fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002fe:	2b04      	cmp	r3, #4
 8000300:	d8ad      	bhi.n	800025e <ap_main+0x32>
 8000302:	a201      	add	r2, pc, #4	@ (adr r2, 8000308 <ap_main+0xdc>)
 8000304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000308:	0800031d 	.word	0x0800031d
 800030c:	08000323 	.word	0x08000323
 8000310:	080003fb 	.word	0x080003fb
 8000314:	0800037b 	.word	0x0800037b
 8000318:	08000493 	.word	0x08000493
		case START:
			ap_state = WATCH;
 800031c:	2301      	movs	r3, #1
 800031e:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8000320:	e0c6      	b.n	80004b0 <ap_main+0x284>
		case WATCH:
			if(clock.sec % 10 >= 5) dp ^= (1U<<2);
 8000322:	89fa      	ldrh	r2, [r7, #14]
 8000324:	4b63      	ldr	r3, [pc, #396]	@ (80004b4 <ap_main+0x288>)
 8000326:	fba3 1302 	umull	r1, r3, r3, r2
 800032a:	08d9      	lsrs	r1, r3, #3
 800032c:	460b      	mov	r3, r1
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	440b      	add	r3, r1
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	b29b      	uxth	r3, r3
 8000338:	2b04      	cmp	r3, #4
 800033a:	d903      	bls.n	8000344 <ap_main+0x118>
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	f083 0304 	eor.w	r3, r3, #4
 8000342:	61fb      	str	r3, [r7, #28]
			FND_WtireData(clock.sec + clock.min*100, dp);
 8000344:	89fb      	ldrh	r3, [r7, #14]
 8000346:	461a      	mov	r2, r3
 8000348:	8a3b      	ldrh	r3, [r7, #16]
 800034a:	4619      	mov	r1, r3
 800034c:	2364      	movs	r3, #100	@ 0x64
 800034e:	fb01 f303 	mul.w	r3, r1, r3
 8000352:	4413      	add	r3, r2
 8000354:	69f9      	ldr	r1, [r7, #28]
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fa2c 	bl	80007b4 <FND_WtireData>
			if (Button_GetState(&hBtnA) == ACT_PUSHED) {
 800035c:	4856      	ldr	r0, [pc, #344]	@ (80004b8 <ap_main+0x28c>)
 800035e:	f000 fbdd 	bl	8000b1c <Button_GetState>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	f040 809d 	bne.w	80004a4 <ap_main+0x278>
				ap_state = SW_run ? STOPWATCH_RUN : STOPWATCH_STOP;
 800036a:	6a3b      	ldr	r3, [r7, #32]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <ap_main+0x148>
 8000370:	2303      	movs	r3, #3
 8000372:	e000      	b.n	8000376 <ap_main+0x14a>
 8000374:	2302      	movs	r3, #2
 8000376:	627b      	str	r3, [r7, #36]	@ 0x24
			}
			break;
 8000378:	e094      	b.n	80004a4 <ap_main+0x278>
		case STOPWATCH_RUN:
			SW_run= 1;
 800037a:	2301      	movs	r3, #1
 800037c:	623b      	str	r3, [r7, #32]
			if(stopwatch.msec >= 5) dp ^= (1U<<1);
 800037e:	88bb      	ldrh	r3, [r7, #4]
 8000380:	2b04      	cmp	r3, #4
 8000382:	d903      	bls.n	800038c <ap_main+0x160>
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f083 0302 	eor.w	r3, r3, #2
 800038a:	61fb      	str	r3, [r7, #28]
			if(stopwatch.sec % 10 >= 5) dp ^= (1U<<3);
 800038c:	88fa      	ldrh	r2, [r7, #6]
 800038e:	4b49      	ldr	r3, [pc, #292]	@ (80004b4 <ap_main+0x288>)
 8000390:	fba3 1302 	umull	r1, r3, r3, r2
 8000394:	08d9      	lsrs	r1, r3, #3
 8000396:	460b      	mov	r3, r1
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	440b      	add	r3, r1
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	1ad3      	subs	r3, r2, r3
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d903      	bls.n	80003ae <ap_main+0x182>
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	f083 0308 	eor.w	r3, r3, #8
 80003ac:	61fb      	str	r3, [r7, #28]
			FND_WtireData(stopwatch.msec+stopwatch.sec*10+stopwatch.min*1000, dp);
 80003ae:	88bb      	ldrh	r3, [r7, #4]
 80003b0:	4619      	mov	r1, r3
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4613      	mov	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	18ca      	adds	r2, r1, r3
 80003c0:	893b      	ldrh	r3, [r7, #8]
 80003c2:	4619      	mov	r1, r3
 80003c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c8:	fb01 f303 	mul.w	r3, r1, r3
 80003cc:	4413      	add	r3, r2
 80003ce:	69f9      	ldr	r1, [r7, #28]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f9ef 	bl	80007b4 <FND_WtireData>
			if (Button_GetState(&hBtnA) == ACT_PUSHED) {
 80003d6:	4838      	ldr	r0, [pc, #224]	@ (80004b8 <ap_main+0x28c>)
 80003d8:	f000 fba0 	bl	8000b1c <Button_GetState>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d102      	bne.n	80003e8 <ap_main+0x1bc>
				ap_state = WATCH;
 80003e2:	2301      	movs	r3, #1
 80003e4:	627b      	str	r3, [r7, #36]	@ 0x24
			} else if (Button_GetState(&hBtnB) == ACT_PUSHED) {
				ap_state = STOPWATCH_STOP;
			}
			break;
 80003e6:	e05f      	b.n	80004a8 <ap_main+0x27c>
			} else if (Button_GetState(&hBtnB) == ACT_PUSHED) {
 80003e8:	4834      	ldr	r0, [pc, #208]	@ (80004bc <ap_main+0x290>)
 80003ea:	f000 fb97 	bl	8000b1c <Button_GetState>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d159      	bne.n	80004a8 <ap_main+0x27c>
				ap_state = STOPWATCH_STOP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 80003f8:	e056      	b.n	80004a8 <ap_main+0x27c>
		case STOPWATCH_STOP:
			SW_run = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	623b      	str	r3, [r7, #32]
			prevCNT_SW = getTick();
 80003fe:	f000 faeb 	bl	80009d8 <getTick>
 8000402:	6178      	str	r0, [r7, #20]
			if(stopwatch.msec >= 5) dp ^= (1U<<1);
 8000404:	88bb      	ldrh	r3, [r7, #4]
 8000406:	2b04      	cmp	r3, #4
 8000408:	d903      	bls.n	8000412 <ap_main+0x1e6>
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	f083 0302 	eor.w	r3, r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
			if(stopwatch.sec % 10 >= 5) dp ^= (1U<<3);
 8000412:	88fa      	ldrh	r2, [r7, #6]
 8000414:	4b27      	ldr	r3, [pc, #156]	@ (80004b4 <ap_main+0x288>)
 8000416:	fba3 1302 	umull	r1, r3, r3, r2
 800041a:	08d9      	lsrs	r1, r3, #3
 800041c:	460b      	mov	r3, r1
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	440b      	add	r3, r1
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	b29b      	uxth	r3, r3
 8000428:	2b04      	cmp	r3, #4
 800042a:	d903      	bls.n	8000434 <ap_main+0x208>
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	f083 0308 	eor.w	r3, r3, #8
 8000432:	61fb      	str	r3, [r7, #28]
			FND_WtireData(stopwatch.msec+stopwatch.sec*10+stopwatch.min*1000, dp);
 8000434:	88bb      	ldrh	r3, [r7, #4]
 8000436:	4619      	mov	r1, r3
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	461a      	mov	r2, r3
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	18ca      	adds	r2, r1, r3
 8000446:	893b      	ldrh	r3, [r7, #8]
 8000448:	4619      	mov	r1, r3
 800044a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800044e:	fb01 f303 	mul.w	r3, r1, r3
 8000452:	4413      	add	r3, r2
 8000454:	69f9      	ldr	r1, [r7, #28]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f9ac 	bl	80007b4 <FND_WtireData>
			if (Button_GetState(&hBtnA) == ACT_PUSHED) {
 800045c:	4816      	ldr	r0, [pc, #88]	@ (80004b8 <ap_main+0x28c>)
 800045e:	f000 fb5d 	bl	8000b1c <Button_GetState>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d102      	bne.n	800046e <ap_main+0x242>
				ap_state = WATCH;
 8000468:	2301      	movs	r3, #1
 800046a:	627b      	str	r3, [r7, #36]	@ 0x24
			} else if (Button_GetState(&hBtnB) == ACT_PUSHED) {
				ap_state = STOPWATCH_RUN;
			} else if (Button_GetState(&hBtnC) == ACT_PUSHED) {
				ap_state = STOPWATCH_CLEAR;
			}
			break;
 800046c:	e01e      	b.n	80004ac <ap_main+0x280>
			} else if (Button_GetState(&hBtnB) == ACT_PUSHED) {
 800046e:	4813      	ldr	r0, [pc, #76]	@ (80004bc <ap_main+0x290>)
 8000470:	f000 fb54 	bl	8000b1c <Button_GetState>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	d102      	bne.n	8000480 <ap_main+0x254>
				ap_state = STOPWATCH_RUN;
 800047a:	2303      	movs	r3, #3
 800047c:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 800047e:	e015      	b.n	80004ac <ap_main+0x280>
			} else if (Button_GetState(&hBtnC) == ACT_PUSHED) {
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <ap_main+0x294>)
 8000482:	f000 fb4b 	bl	8000b1c <Button_GetState>
 8000486:	4603      	mov	r3, r0
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10f      	bne.n	80004ac <ap_main+0x280>
				ap_state = STOPWATCH_CLEAR;
 800048c:	2304      	movs	r3, #4
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8000490:	e00c      	b.n	80004ac <ap_main+0x280>
		case STOPWATCH_CLEAR:
			ap_state = STOPWATCH_STOP;
 8000492:	2302      	movs	r3, #2
 8000494:	627b      	str	r3, [r7, #36]	@ 0x24
			stopwatch.msec = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	80bb      	strh	r3, [r7, #4]
			stopwatch.sec = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	80fb      	strh	r3, [r7, #6]
			stopwatch.min = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	813b      	strh	r3, [r7, #8]
			break;
 80004a2:	e005      	b.n	80004b0 <ap_main+0x284>
			break;
 80004a4:	bf00      	nop
 80004a6:	e6da      	b.n	800025e <ap_main+0x32>
			break;
 80004a8:	bf00      	nop
 80004aa:	e6d8      	b.n	800025e <ap_main+0x32>
			break;
 80004ac:	bf00      	nop
 80004ae:	e6d6      	b.n	800025e <ap_main+0x32>
		if(getTick() - prevCNT_clock >= 100) {
 80004b0:	e6d5      	b.n	800025e <ap_main+0x32>
 80004b2:	bf00      	nop
 80004b4:	cccccccd 	.word	0xcccccccd
 80004b8:	200000bc 	.word	0x200000bc
 80004bc:	200000c8 	.word	0x200000c8
 80004c0:	200000d4 	.word	0x200000d4

080004c4 <ap_init>:
	}
	return 0;
}

void ap_init()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	SystemClock_init();
 80004c8:	f000 fa44 	bl	8000954 <SystemClock_init>
	LedBar_Init();
 80004cc:	f000 fa22 	bl	8000914 <LedBar_Init>
	Button_Init(&hBtnA, GPIOB, 5);
 80004d0:	2205      	movs	r2, #5
 80004d2:	4912      	ldr	r1, [pc, #72]	@ (800051c <ap_init+0x58>)
 80004d4:	4812      	ldr	r0, [pc, #72]	@ (8000520 <ap_init+0x5c>)
 80004d6:	f000 fb09 	bl	8000aec <Button_Init>
	Button_Init(&hBtnB, GPIOB, 3);
 80004da:	2203      	movs	r2, #3
 80004dc:	490f      	ldr	r1, [pc, #60]	@ (800051c <ap_init+0x58>)
 80004de:	4811      	ldr	r0, [pc, #68]	@ (8000524 <ap_init+0x60>)
 80004e0:	f000 fb04 	bl	8000aec <Button_Init>
	Button_Init(&hBtnC, GPIOA, 10);
 80004e4:	220a      	movs	r2, #10
 80004e6:	4910      	ldr	r1, [pc, #64]	@ (8000528 <ap_init+0x64>)
 80004e8:	4810      	ldr	r0, [pc, #64]	@ (800052c <ap_init+0x68>)
 80004ea:	f000 faff 	bl	8000aec <Button_Init>
	FND_Init();
 80004ee:	f000 f929 	bl	8000744 <FND_Init>

	//TIM2 EN, TIM2INTRF
	TIM_Init(TIM2, 16 - 1, 1000 - 1);
 80004f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004f6:	210f      	movs	r1, #15
 80004f8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004fc:	f000 fa86 	bl	8000a0c <TIM_Init>
	TIM_CntStart(TIM2);
 8000500:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000504:	f000 fa98 	bl	8000a38 <TIM_CntStart>
	TIM_UIEnable(TIM2);
 8000508:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800050c:	f000 faa4 	bl	8000a58 <TIM_UIEnable>
	NVIC_EnableIRQ(TIM2_IRQn); // TIM2 interruft EN
 8000510:	201c      	movs	r0, #28
 8000512:	f7ff fe61 	bl	80001d8 <__NVIC_EnableIRQ>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400
 8000520:	200000bc 	.word	0x200000bc
 8000524:	200000c8 	.word	0x200000c8
 8000528:	40020000 	.word	0x40020000
 800052c:	200000d4 	.word	0x200000d4

08000530 <FND_Decode>:

static uint16_t fndDisplayNum = 0; // fnd main data(max 9999)
static uint16_t dotPos = 0b0000;

int FND_Decode(int digitPos)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    switch (digitPos) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d84d      	bhi.n	80005da <FND_Decode+0xaa>
 800053e:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <FND_Decode+0x14>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	08000555 	.word	0x08000555
 8000548:	0800056f 	.word	0x0800056f
 800054c:	08000593 	.word	0x08000593
 8000550:	080005b7 	.word	0x080005b7
    case DIGIT1:
        return fndDisplayNum % 10;
 8000554:	4b24      	ldr	r3, [pc, #144]	@ (80005e8 <FND_Decode+0xb8>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <FND_Decode+0xbc>)
 800055a:	fba3 1302 	umull	r1, r3, r3, r2
 800055e:	08d9      	lsrs	r1, r3, #3
 8000560:	460b      	mov	r3, r1
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	440b      	add	r3, r1
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	b29b      	uxth	r3, r3
 800056c:	e036      	b.n	80005dc <FND_Decode+0xac>
    case DIGIT10:
        return fndDisplayNum / 10 % 10;
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <FND_Decode+0xb8>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4a1e      	ldr	r2, [pc, #120]	@ (80005ec <FND_Decode+0xbc>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <FND_Decode+0xbc>)
 800057e:	fba3 1302 	umull	r1, r3, r3, r2
 8000582:	08d9      	lsrs	r1, r3, #3
 8000584:	460b      	mov	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	440b      	add	r3, r1
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	b29b      	uxth	r3, r3
 8000590:	e024      	b.n	80005dc <FND_Decode+0xac>
    case DIGIT100:
        return fndDisplayNum / 100 % 10;
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <FND_Decode+0xb8>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <FND_Decode+0xc0>)
 8000598:	fba2 2303 	umull	r2, r3, r2, r3
 800059c:	095b      	lsrs	r3, r3, #5
 800059e:	b29a      	uxth	r2, r3
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <FND_Decode+0xbc>)
 80005a2:	fba3 1302 	umull	r1, r3, r3, r2
 80005a6:	08d9      	lsrs	r1, r3, #3
 80005a8:	460b      	mov	r3, r1
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	440b      	add	r3, r1
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	e012      	b.n	80005dc <FND_Decode+0xac>
    case DIGIT1000:
        return fndDisplayNum / 1000 % 10;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	@ (80005e8 <FND_Decode+0xb8>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <FND_Decode+0xc4>)
 80005bc:	fba2 2303 	umull	r2, r3, r2, r3
 80005c0:	099b      	lsrs	r3, r3, #6
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <FND_Decode+0xbc>)
 80005c6:	fba3 1302 	umull	r1, r3, r3, r2
 80005ca:	08d9      	lsrs	r1, r3, #3
 80005cc:	460b      	mov	r3, r1
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	e000      	b.n	80005dc <FND_Decode+0xac>
    default:
    }
    return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	200000e0 	.word	0x200000e0
 80005ec:	cccccccd 	.word	0xcccccccd
 80005f0:	51eb851f 	.word	0x51eb851f
 80005f4:	10624dd3 	.word	0x10624dd3

080005f8 <FND_DisOffAll>:

void FND_DisOffAll()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	e005      	b.n	8000610 <FND_DisOffAll+0x18>
        FND_DisOff(i);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f80b 	bl	8000620 <FND_DisOff>
    for (int i = 0; i < 4; ++i) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b03      	cmp	r3, #3
 8000614:	ddf6      	ble.n	8000604 <FND_DisOffAll+0xc>
    }
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <FND_DisOff>:

void FND_DisOff(int pos)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    GPIO_WritePin(FND_cmm[pos].GPIO, FND_cmm[pos].pinNum, PIN_RESET);
 8000628:	4a08      	ldr	r2, [pc, #32]	@ (800064c <FND_DisOff+0x2c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <FND_DisOff+0x2c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	4413      	add	r3, r2
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	f000 f92e 	bl	800089e <GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000

08000650 <FND_DisOn>:

void FND_DisOn(int pos)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    GPIO_WritePin(FND_cmm[pos].GPIO, FND_cmm[pos].pinNum, PIN_SET);
 8000658:	4a08      	ldr	r2, [pc, #32]	@ (800067c <FND_DisOn+0x2c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000660:	4a06      	ldr	r2, [pc, #24]	@ (800067c <FND_DisOn+0x2c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f000 f916 	bl	800089e <GPIO_WritePin>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000000 	.word	0x20000000

08000680 <FND_printDot>:

void FND_printDot(uint32_t digitPos){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(dotPos & (1U << digitPos)) GPIO_WritePin(FND_seg[7].GPIO, FND_seg[7].pinNum, PIN_RESET);
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <FND_printDot+0x34>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	fa22 f303 	lsr.w	r3, r2, r3
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d007      	beq.n	80006ac <FND_printDot+0x2c>
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <FND_printDot+0x38>)
 800069e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006a0:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <FND_printDot+0x38>)
 80006a2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80006a4:	2200      	movs	r2, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f8f9 	bl	800089e <GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000e2 	.word	0x200000e2
 80006b8:	20000020 	.word	0x20000020

080006bc <FND_PrintDigit>:

void FND_PrintDigit(int digit)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
    const uint8_t segFont[10] = {
 80006c4:	4a1d      	ldr	r2, [pc, #116]	@ (800073c <FND_PrintDigit+0x80>)
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80006cc:	c303      	stmia	r3!, {r0, r1}
 80006ce:	801a      	strh	r2, [r3, #0]
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F // 9
    };
    for (int i = 0; i < 8; ++i) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	e02a      	b.n	800072c <FND_PrintDigit+0x70>
        if (!(segFont[digit] & (1 << i)))
 80006d6:	f107 0208 	add.w	r2, r7, #8
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	fa42 f303 	asr.w	r3, r2, r3
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10d      	bne.n	800070c <FND_PrintDigit+0x50>
            GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_SET);
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <FND_PrintDigit+0x84>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006f8:	4a11      	ldr	r2, [pc, #68]	@ (8000740 <FND_PrintDigit+0x84>)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4413      	add	r3, r2
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	4619      	mov	r1, r3
 8000706:	f000 f8ca 	bl	800089e <GPIO_WritePin>
 800070a:	e00c      	b.n	8000726 <FND_PrintDigit+0x6a>
        else
            GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_RESET);
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <FND_PrintDigit+0x84>)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <FND_PrintDigit+0x84>)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	f000 f8bc 	bl	800089e <GPIO_WritePin>
    for (int i = 0; i < 8; ++i) {
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b07      	cmp	r3, #7
 8000730:	ddd1      	ble.n	80006d6 <FND_PrintDigit+0x1a>
    }
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08000c44 	.word	0x08000c44
 8000740:	20000020 	.word	0x20000020

08000744 <FND_Init>:

/////public/////
// initializing FND
void FND_Init()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	e00f      	b.n	8000770 <FND_Init+0x2c>
        GPIO_Init(FND_cmm[i].GPIO, FND_cmm[i].pinNum, OUTPUT);
 8000750:	4a16      	ldr	r2, [pc, #88]	@ (80007ac <FND_Init+0x68>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000758:	4a14      	ldr	r2, [pc, #80]	@ (80007ac <FND_Init+0x68>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	4413      	add	r3, r2
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	f000 f869 	bl	800083c <GPIO_Init>
    for (int i = 0; i < 4; ++i) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b03      	cmp	r3, #3
 8000774:	ddec      	ble.n	8000750 <FND_Init+0xc>
    }
    for (int i = 0; i < 8; ++i) {
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	e00f      	b.n	800079c <FND_Init+0x58>
        GPIO_Init(FND_seg[i].GPIO, FND_seg[i].pinNum, OUTPUT);
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <FND_Init+0x6c>)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000784:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <FND_Init+0x6c>)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	4413      	add	r3, r2
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	f000 f853 	bl	800083c <GPIO_Init>
    for (int i = 0; i < 8; ++i) {
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2b07      	cmp	r3, #7
 80007a0:	ddec      	ble.n	800077c <FND_Init+0x38>
    }
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000020 	.word	0x20000020

080007b4 <FND_WtireData>:

// Write FndData
void FND_WtireData(uint32_t data, uint32_t dotPosition)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
    fndDisplayNum = data;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <FND_WtireData+0x28>)
 80007c4:	801a      	strh	r2, [r3, #0]
    dotPos = dotPosition;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <FND_WtireData+0x2c>)
 80007cc:	801a      	strh	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200000e0 	.word	0x200000e0
 80007e0:	200000e2 	.word	0x200000e2

080007e4 <FND_DisplayData>:
    return fndDisplayNum;
}

// Display FndData
void FND_DisplayData()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
    static int digitPos = DIGIT1;
    uint8_t digitD = FND_Decode(digitPos);
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <FND_DisplayData+0x54>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fe9e 	bl	8000530 <FND_Decode>
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
    // 인터럽트 발생시 한 자리씩 출력
    FND_DisOffAll();
 80007f8:	f7ff fefe 	bl	80005f8 <FND_DisOffAll>
    FND_PrintDigit(digitD);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff5c 	bl	80006bc <FND_PrintDigit>
    FND_printDot(digitPos);
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <FND_DisplayData+0x54>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff39 	bl	8000680 <FND_printDot>
    FND_DisOn(digitPos);
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <FND_DisplayData+0x54>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff1c 	bl	8000650 <FND_DisOn>
    digitPos = (digitPos + 1) % 4;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <FND_DisplayData+0x54>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	425a      	negs	r2, r3
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	f002 0203 	and.w	r2, r2, #3
 8000828:	bf58      	it	pl
 800082a:	4253      	negpl	r3, r2
 800082c:	4a02      	ldr	r2, [pc, #8]	@ (8000838 <FND_DisplayData+0x54>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000e4 	.word	0x200000e4

0800083c <GPIO_Init>:
#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef* GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	71fb      	strb	r3, [r7, #7]
    if (pinMode == OUTPUT) {
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d115      	bne.n	800087c <GPIO_Init+0x40>
        GPIOx->MODER |= (0x01U << (pinNum * 2));
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	431a      	orrs	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	601a      	str	r2, [r3, #0]
        GPIOx->MODER &= ~(0x02U << (pinNum * 2));
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2102      	movs	r1, #2
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	401a      	ands	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	601a      	str	r2, [r3, #0]
    } else {
        GPIOx->MODER &= ~(0x03U << (pinNum * 2));
    }
}
 800087a:	e00a      	b.n	8000892 <GPIO_Init+0x56>
        GPIOx->MODER &= ~(0x03U << (pinNum * 2));
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2103      	movs	r1, #3
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	401a      	ands	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71fb      	strb	r3, [r7, #7]
    if (pinState == PIN_SET) {
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d109      	bne.n	80008c6 <GPIO_WritePin+0x28>
        GPIOx->ODR |= (1U << pinNum);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	2101      	movs	r1, #1
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	431a      	orrs	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	615a      	str	r2, [r3, #20]
    } else {
        GPIOx->ODR &= ~(1U << pinNum);
    }
}
 80008c4:	e009      	b.n	80008da <GPIO_WritePin+0x3c>
        GPIOx->ODR &= ~(1U << pinNum);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	2101      	movs	r1, #1
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	401a      	ands	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	615a      	str	r2, [r3, #20]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint32_t pinNum)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
    return ((GPIOx->IDR & (1U << pinNum)) ? 1 : 0);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	2101      	movs	r1, #1
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	4013      	ands	r3, r2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	bf14      	ite	ne
 8000902:	2301      	movne	r3, #1
 8000904:	2300      	moveq	r3, #0
 8000906:	b2db      	uxtb	r3, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LedBar_Init>:
    { GPIOC, 2 },
    { GPIOC, 3 }
};

void LedBar_Init()
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
    for (int var = 0; var < 8; var++) {
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	e00f      	b.n	8000940 <LedBar_Init+0x2c>
        GPIO_Init(ledBar[var].GPIO, ledBar[var].pinNum, OUTPUT);
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <LedBar_Init+0x3c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000928:	4a09      	ldr	r2, [pc, #36]	@ (8000950 <LedBar_Init+0x3c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	f7ff ff81 	bl	800083c <GPIO_Init>
    for (int var = 0; var < 8; var++) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b07      	cmp	r3, #7
 8000944:	ddec      	ble.n	8000920 <LedBar_Init+0xc>
    }
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000060 	.word	0x20000060

08000954 <SystemClock_init>:
 */

#include "SystemClock.h"

void SystemClock_init()
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // RCC_AHB1ENR
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <SystemClock_init+0x40>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <SystemClock_init+0x40>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // RCC_AHB1ENR
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <SystemClock_init+0x40>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <SystemClock_init+0x40>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // RCC_AHB1ENR
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <SystemClock_init+0x40>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000974:	4a07      	ldr	r2, [pc, #28]	@ (8000994 <SystemClock_init+0x40>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // RCC_APB1ENR
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <SystemClock_init+0x40>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a04      	ldr	r2, [pc, #16]	@ (8000994 <SystemClock_init+0x40>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <delay>:

void delay(uint32_t time)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    for (int var = 0; var < time; ++var) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e00c      	b.n	80009c0 <delay+0x28>
        for (int s = 0; s < 1000; ++s) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	e002      	b.n	80009b2 <delay+0x1a>
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3301      	adds	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009b8:	dbf8      	blt.n	80009ac <delay+0x14>
    for (int var = 0; var < time; ++var) {
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8ee      	bhi.n	80009a6 <delay+0xe>
        }
    }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <getTick>:

#include "sys_tick.h"

static uint32_t tick;

uint32_t getTick(){
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	return tick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <getTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	200000e8 	.word	0x200000e8

080009f0 <incTick>:

void incTick(){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	tick++;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <incTick+0x18>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a03      	ldr	r2, [pc, #12]	@ (8000a08 <incTick+0x18>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	200000e8 	.word	0x200000e8

08000a0c <TIM_Init>:
 */

#include "TIM.h"

void TIM_Init(TIM_TypeDef *TIMx, uint32_t psc, uint32_t arr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
   TIM_WritePSC(TIMx, psc);
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f83a 	bl	8000a94 <TIM_WritePSC>
   TIM_WriteARR(TIMx, arr);
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f844 	bl	8000ab0 <TIM_WriteARR>
   TIM_WriteCNT(TIMx, 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f000 f824 	bl	8000a78 <TIM_WriteCNT>
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <TIM_CntStart>:

void TIM_CntStart(TIM_TypeDef *TIMx)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
   TIMx->CR1 |= 1<<0;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f043 0201 	orr.w	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <TIM_UIEnable>:
{
   TIMx->CR1 &= ~(1<<0);
}

void TIM_UIEnable(TIM_TypeDef *TIMx)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
   TIMx->DIER |= 1<<0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f043 0201 	orr.w	r2, r3, #1
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	60da      	str	r2, [r3, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <TIM_WriteCNT>:
{
   return TIMx->CNT;
}

void TIM_WriteCNT(TIM_TypeDef *TIMx, uint32_t cnt)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
   TIMx->CNT = cnt;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <TIM_WritePSC>:
{
   return TIMx->PSC;
}

void TIM_WritePSC(TIM_TypeDef *TIMx, uint32_t psc)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
   TIMx->PSC = psc;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <TIM_WriteARR>:
{
   return TIMx->ARR;
}

void TIM_WriteARR(TIM_TypeDef *TIMx, uint32_t arr)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
   TIMx->ARR = arr;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM_ClearUIF>:

void TIM_ClearUIF(TIM_TypeDef *TIMx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
   TIMx->SR &= ~(1<<0);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	f023 0201 	bic.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Button_Init>:
    PUSHED = 0,
    RELEASED = 1,
};

void Button_Init(button_handler_t* hbtn, GPIO_TypeDef* GPIOx, uint32_t PinNum)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
    hbtn->GPIOx = GPIOx;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	601a      	str	r2, [r3, #0]
    hbtn->PinNum = PinNum;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	605a      	str	r2, [r3, #4]
    hbtn->preState = RELEASED;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2201      	movs	r2, #1
 8000b08:	609a      	str	r2, [r3, #8]
    GPIO_Init(GPIOx, PinNum, INPUT);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	68b8      	ldr	r0, [r7, #8]
 8000b10:	f7ff fe94 	bl	800083c <GPIO_Init>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <Button_GetState>:

int Button_GetState(button_handler_t* button_handlerX)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    uint32_t curState;
    curState = GPIO_ReadPin(button_handlerX->GPIOx, button_handlerX->PinNum);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4610      	mov	r0, r2
 8000b30:	f7ff fed9 	bl	80008e6 <GPIO_ReadPin>
 8000b34:	60f8      	str	r0, [r7, #12]

    if (button_handlerX->preState == RELEASED && curState == PUSHED) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d10a      	bne.n	8000b54 <Button_GetState+0x38>
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <Button_GetState+0x38>
        delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff ff27 	bl	8000998 <delay>
        button_handlerX->preState = curState;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	609a      	str	r2, [r3, #8]
        return ACT_PUSHED;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e00f      	b.n	8000b74 <Button_GetState+0x58>
    } else if (button_handlerX->preState == PUSHED && curState == RELEASED) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d10a      	bne.n	8000b72 <Button_GetState+0x56>
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <Button_GetState+0x56>
        delay(2);
 8000b62:	2002      	movs	r0, #2
 8000b64:	f7ff ff18 	bl	8000998 <delay>
        button_handlerX->preState = curState;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	609a      	str	r2, [r3, #8]
        return ACT_RELEASED;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	e000      	b.n	8000b74 <Button_GetState+0x58>
    }
    return NO_ACT;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <main>:
 */

#include "AP_main.h"

int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    ap_init();
 8000b80:	f7ff fca0 	bl	80004c4 <ap_init>
    ap_main();
 8000b84:	f7ff fb52 	bl	800022c <ap_main>
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bbe:	f000 f811 	bl	8000be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff ffdb 	bl	8000b7c <main>

08000bc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000bd4:	08000c58 	.word	0x08000c58
  ldr r2, =_sbss
 8000bd8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000bdc:	200000ec 	.word	0x200000ec

08000be0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <__libc_init_array>:
 8000be4:	b570      	push	{r4, r5, r6, lr}
 8000be6:	4d0d      	ldr	r5, [pc, #52]	@ (8000c1c <__libc_init_array+0x38>)
 8000be8:	4c0d      	ldr	r4, [pc, #52]	@ (8000c20 <__libc_init_array+0x3c>)
 8000bea:	1b64      	subs	r4, r4, r5
 8000bec:	10a4      	asrs	r4, r4, #2
 8000bee:	2600      	movs	r6, #0
 8000bf0:	42a6      	cmp	r6, r4
 8000bf2:	d109      	bne.n	8000c08 <__libc_init_array+0x24>
 8000bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8000c24 <__libc_init_array+0x40>)
 8000bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8000c28 <__libc_init_array+0x44>)
 8000bf8:	f000 f818 	bl	8000c2c <_init>
 8000bfc:	1b64      	subs	r4, r4, r5
 8000bfe:	10a4      	asrs	r4, r4, #2
 8000c00:	2600      	movs	r6, #0
 8000c02:	42a6      	cmp	r6, r4
 8000c04:	d105      	bne.n	8000c12 <__libc_init_array+0x2e>
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c0c:	4798      	blx	r3
 8000c0e:	3601      	adds	r6, #1
 8000c10:	e7ee      	b.n	8000bf0 <__libc_init_array+0xc>
 8000c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c16:	4798      	blx	r3
 8000c18:	3601      	adds	r6, #1
 8000c1a:	e7f2      	b.n	8000c02 <__libc_init_array+0x1e>
 8000c1c:	08000c50 	.word	0x08000c50
 8000c20:	08000c50 	.word	0x08000c50
 8000c24:	08000c50 	.word	0x08000c50
 8000c28:	08000c54 	.word	0x08000c54

08000c2c <_init>:
 8000c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2e:	bf00      	nop
 8000c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c32:	bc08      	pop	{r3}
 8000c34:	469e      	mov	lr, r3
 8000c36:	4770      	bx	lr

08000c38 <_fini>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	bf00      	nop
 8000c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3e:	bc08      	pop	{r3}
 8000c40:	469e      	mov	lr, r3
 8000c42:	4770      	bx	lr
