
20250625_TImeWatch_StopWatch_IPO_Pattern.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005a30  08005a30  00006a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af4  08005af4  000070dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005af4  08005af4  00006af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005afc  08005afc  000070dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b00  08005b00  00006b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000dc  20000000  08005b04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200000dc  08005be0  000070dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005be0  000073a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013314  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d0  00000000  00000000  0001a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e29  00000000  00000000  0001eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ff  00000000  00000000  0001f969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192fd  00000000  00000000  00037b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917b7  00000000  00000000  00050e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e261c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  000e2660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e7580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a18 	.word	0x08005a18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	08005a18 	.word	0x08005a18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b46      	ldr	r3, [pc, #280]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_GPIO_Init+0x140>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b3f      	ldr	r3, [pc, #252]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a3a      	ldr	r2, [pc, #232]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <MX_GPIO_Init+0x140>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_GPIO_Init+0x140>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a33      	ldr	r2, [pc, #204]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_GPIO_Init+0x140>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8000648:	482d      	ldr	r0, [pc, #180]	@ (8000700 <MX_GPIO_Init+0x144>)
 800064a:	f001 fecd 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0106 	movw	r1, #61446	@ 0xf006
 8000654:	482b      	ldr	r0, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x148>)
 8000656:	f001 fec7 	bl	80023e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000660:	4829      	ldr	r0, [pc, #164]	@ (8000708 <MX_GPIO_Init+0x14c>)
 8000662:	f001 fec1 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC4 PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000666:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4820      	ldr	r0, [pc, #128]	@ (8000700 <MX_GPIO_Init+0x144>)
 8000680:	f001 fd16 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000684:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8000688:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x148>)
 800069e:	f001 fd07 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4814      	ldr	r0, [pc, #80]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006b8:	f001 fcfa 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_GPIO_Init+0x14c>)
 80006d6:	f001 fceb 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80006da:	2328      	movs	r3, #40	@ 0x28
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_GPIO_Init+0x148>)
 80006ee:	f001 fcdf 	bl	80020b0 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	@ 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020400 	.word	0x40020400
 8000708:	40020000 	.word	0x40020000

0800070c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 fe67 	bl	800241c <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f8cc 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000f8 	.word	0x200000f8
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <HAL_I2C_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <HAL_I2C_MspInit+0x8c>)
 80007c4:	f001 fc74 	bl	80020b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	@ 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f001 fa1e 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f80e 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff feda 	bl	80005bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000808:	f000 f92c 	bl	8000a64 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800080c:	f000 f99c 	bl	8000b48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000810:	f7ff ff7c 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 8000814:	f000 fd7c 	bl	8001310 <ap_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ap_main();
 8000818:	f000 fd6a 	bl	80012f0 <ap_main>
 800081c:	e7fc      	b.n	8000818 <main+0x20>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f004 fc74 	bl	800511c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fa57 	bl	8002d58 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f81e 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fcb9 	bl	8003248 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f808 	bl	80008f0 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f001 f99d 	bl	8001ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f002 ff1b 	bl	80037ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000150 	.word	0x20000150

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <USART2_IRQHandler+0x10>)
 80009c6:	f003 fb93 	bl	80040f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000198 	.word	0x20000198

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f004 fb92 	bl	800512c <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	2000014c 	.word	0x2000014c
 8000a3c:	200003a0 	.word	0x200003a0

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a8a:	2263      	movs	r2, #99	@ 0x63
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000aaa:	f002 fded 	bl	8003688 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f7ff ff1c 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000ac6:	f002 ff81 	bl	80039cc <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f7ff ff0e 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM2_Init+0x94>)
 8000ae2:	f003 f983 	bl	8003dec <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f7ff ff00 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000150 	.word	0x20000150

08000afc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b0c:	d115      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_TIM_Base_MspInit+0x48>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f001 f9f5 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b34:	201c      	movs	r0, #28
 8000b36:	f001 fa0e 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f003 f9b6 	bl	8003ef0 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f7ff feb1 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000198 	.word	0x20000198
 8000b98:	40004400 	.word	0x40004400

08000b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_UART_MspInit+0x94>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d133      	bne.n	8000c26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_UART_MspInit+0x98>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <HAL_UART_MspInit+0x9c>)
 8000c12:	f001 fa4d 	bl	80020b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2026      	movs	r0, #38	@ 0x26
 8000c1c:	f001 f97f 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c20:	2026      	movs	r0, #38	@ 0x26
 8000c22:	f001 f998 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c40:	f7ff fefe 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c46:	490d      	ldr	r1, [pc, #52]	@ (8000c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f004 fa65 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6e:	f7ff fdc3 	bl	80007f8 <main>
  bx  lr    
 8000c72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c7c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000c80:	08005b04 	.word	0x08005b04
  ldr r2, =_sbss
 8000c84:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000c88:	200003a0 	.word	0x200003a0

08000c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC_IRQHandler>
	...

08000c90 <controller_MessageManager>:
void controller_MessageManager();
void Controller_StopWatchCtrl();
Watch_t Controller_getTimeWatch();
Watch_t Controller_getStopWatch();

void controller_MessageManager() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
	Watch_t tempTimeWatch = get_stopwatch();
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fb40 	bl	8001320 <get_stopwatch>
	Watch_t tempStopWatch = get_timewatch();
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fc00 	bl	80014a8 <get_timewatch>
	memcpy(&timeWatchData, &tempTimeWatch, sizeof(Watch_t));
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <controller_MessageManager+0x40>)
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb2:	6018      	str	r0, [r3, #0]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	8019      	strh	r1, [r3, #0]
	memcpy(&stopWatchData, &tempStopWatch, sizeof(Watch_t));
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <controller_MessageManager+0x44>)
 8000cba:	463a      	mov	r2, r7
 8000cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	8019      	strh	r1, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001ec 	.word	0x200001ec
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <Controller_Excute>:

///// public /////
void Controller_Excute()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	Controller_Mode();
 8000cdc:	f000 f844 	bl	8000d68 <Controller_Mode>
	controller_MessageManager();
 8000ce0:	f7ff ffd6 	bl	8000c90 <controller_MessageManager>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <Controller_SetInputData>:

void Controller_SetInputData(inputData_TypeDef inputData)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	463b      	mov	r3, r7
 8000cf0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (inputData.id == controlId_MODE) {
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d106      	bne.n	8000d08 <Controller_SetInputData+0x20>
		controlData.id = controlId_MODE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
		controlData.data = controlData_MODE_ACT;
 8000d00:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	605a      	str	r2, [r3, #4]
	}
	else if (inputData.id == controlId_BTN_CLEAR) {
		controlData.id = controlId_BTN_CLEAR;
		controlData.data = controlData_STOPWATCH_ACT;
	}
}
 8000d06:	e026      	b.n	8000d56 <Controller_SetInputData+0x6e>
	else if (inputData.id == controlId_RUN_STOP) {
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d106      	bne.n	8000d1c <Controller_SetInputData+0x34>
		controlData.id = controlId_RUN_STOP;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	601a      	str	r2, [r3, #0]
		controlData.data = controlData_STOPWATCH_ACT;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d16:	2203      	movs	r2, #3
 8000d18:	605a      	str	r2, [r3, #4]
}
 8000d1a:	e01c      	b.n	8000d56 <Controller_SetInputData+0x6e>
	else if (inputData.id == controlId_RUN) {
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d106      	bne.n	8000d30 <Controller_SetInputData+0x48>
		controlData.id = controlId_RUN;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d24:	2204      	movs	r2, #4
 8000d26:	601a      	str	r2, [r3, #0]
		controlData.data = controlData_STOPWATCH_ACT;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	605a      	str	r2, [r3, #4]
}
 8000d2e:	e012      	b.n	8000d56 <Controller_SetInputData+0x6e>
	else if (inputData.id == controlId_STOP) {
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d106      	bne.n	8000d44 <Controller_SetInputData+0x5c>
		controlData.id = controlId_STOP;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d38:	2203      	movs	r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
		controlData.data = controlData_STOPWATCH_ACT;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d3e:	2203      	movs	r2, #3
 8000d40:	605a      	str	r2, [r3, #4]
}
 8000d42:	e008      	b.n	8000d56 <Controller_SetInputData+0x6e>
	else if (inputData.id == controlId_BTN_CLEAR) {
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d105      	bne.n	8000d56 <Controller_SetInputData+0x6e>
		controlData.id = controlId_BTN_CLEAR;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	601a      	str	r2, [r3, #0]
		controlData.data = controlData_STOPWATCH_ACT;
 8000d50:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <Controller_SetInputData+0x7c>)
 8000d52:	2203      	movs	r2, #3
 8000d54:	605a      	str	r2, [r3, #4]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200001e4 	.word	0x200001e4

08000d68 <Controller_Mode>:

void Controller_Mode()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	switch (modeState) {
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <Controller_Mode+0x78>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <Controller_Mode+0x12>
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d00b      	beq.n	8000d90 <Controller_Mode+0x28>
			controlData.id = controlId_NO_CONTROL;
			modeState = STOP_WATCH;
		}
		break;
	}
}
 8000d78:	e030      	b.n	8000ddc <Controller_Mode+0x74>
		if (controlData.id == controlId_MODE) {
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <Controller_Mode+0x7c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d129      	bne.n	8000dd6 <Controller_Mode+0x6e>
			controlData.id = controlId_NO_CONTROL;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <Controller_Mode+0x7c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
			modeState = STOP_WATCH;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <Controller_Mode+0x78>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
		break;
 8000d8e:	e022      	b.n	8000dd6 <Controller_Mode+0x6e>
		Controller_StopWatchCtrl();
 8000d90:	f000 f82a 	bl	8000de8 <Controller_StopWatchCtrl>
		if (controlData.id == controlId_MODE) {
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <Controller_Mode+0x7c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d106      	bne.n	8000daa <Controller_Mode+0x42>
			controlData.id = controlId_NO_CONTROL;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <Controller_Mode+0x7c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
			modeState = TIME_WATCH;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <Controller_Mode+0x78>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		break;
 8000da8:	e017      	b.n	8000dda <Controller_Mode+0x72>
		} else if (controlData.id == controlId_MODE) {
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <Controller_Mode+0x7c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d106      	bne.n	8000dc0 <Controller_Mode+0x58>
			controlData.id = controlId_NO_CONTROL;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <Controller_Mode+0x7c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
			modeState = STOP_WATCH;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <Controller_Mode+0x78>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
		break;
 8000dbe:	e00c      	b.n	8000dda <Controller_Mode+0x72>
		} else if (controlData.id == controlId_MODE) {
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <Controller_Mode+0x7c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <Controller_Mode+0x72>
			controlData.id = controlId_NO_CONTROL;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <Controller_Mode+0x7c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
			modeState = STOP_WATCH;
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <Controller_Mode+0x78>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
		break;
 8000dd4:	e001      	b.n	8000dda <Controller_Mode+0x72>
		break;
 8000dd6:	bf00      	nop
 8000dd8:	e000      	b.n	8000ddc <Controller_Mode+0x74>
		break;
 8000dda:	bf00      	nop
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001e0 	.word	0x200001e0
 8000de4:	200001e4 	.word	0x200001e4

08000de8 <Controller_StopWatchCtrl>:


void Controller_StopWatchCtrl()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	switch (get_stopwatchState()) {
 8000dec:	f000 faaa 	bl	8001344 <get_stopwatchState>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d00c      	beq.n	8000e10 <Controller_StopWatchCtrl+0x28>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	dc0d      	bgt.n	8000e16 <Controller_StopWatchCtrl+0x2e>
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <Controller_StopWatchCtrl+0x1c>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d003      	beq.n	8000e0a <Controller_StopWatchCtrl+0x22>
		break;
	case CLEAR:
		StopWatch_Clear();
		break;
	}
}
 8000e02:	e008      	b.n	8000e16 <Controller_StopWatchCtrl+0x2e>
		StopWatch_Stop();
 8000e04:	f000 faf8 	bl	80013f8 <StopWatch_Stop>
		break;
 8000e08:	e005      	b.n	8000e16 <Controller_StopWatchCtrl+0x2e>
		StopWatch_Run();
 8000e0a:	f000 fb19 	bl	8001440 <StopWatch_Run>
		break;
 8000e0e:	e002      	b.n	8000e16 <Controller_StopWatchCtrl+0x2e>
		StopWatch_Clear();
 8000e10:	f000 fb30 	bl	8001474 <StopWatch_Clear>
		break;
 8000e14:	bf00      	nop
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <Listener_Init>:

static uint8_t rxData = 0;
static CircleQue_tpye uartRxQue = {0};

void Listener_Init()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
 8000e20:	2220      	movs	r2, #32
 8000e22:	490c      	ldr	r1, [pc, #48]	@ (8000e54 <Listener_Init+0x38>)
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <Listener_Init+0x3c>)
 8000e26:	f000 fb93 	bl	8001550 <Button_Init>
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4909      	ldr	r1, [pc, #36]	@ (8000e54 <Listener_Init+0x38>)
 8000e2e:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <Listener_Init+0x40>)
 8000e30:	f000 fb8e 	bl	8001550 <Button_Init>
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
 8000e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e38:	4909      	ldr	r1, [pc, #36]	@ (8000e60 <Listener_Init+0x44>)
 8000e3a:	480a      	ldr	r0, [pc, #40]	@ (8000e64 <Listener_Init+0x48>)
 8000e3c:	f000 fb88 	bl	8001550 <Button_Init>
	HAL_UART_Receive_IT(&huart2, &rxData, 1); // uart recv interrupt enable(UART IT initializing)
 8000e40:	2201      	movs	r2, #1
 8000e42:	4909      	ldr	r1, [pc, #36]	@ (8000e68 <Listener_Init+0x4c>)
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <Listener_Init+0x50>)
 8000e46:	f003 f92e 	bl	80040a6 <HAL_UART_Receive_IT>
	queInit(&uartRxQue);
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <Listener_Init+0x54>)
 8000e4c:	f004 f8bc 	bl	8004fc8 <queInit>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020400 	.word	0x40020400
 8000e58:	20000220 	.word	0x20000220
 8000e5c:	2000022c 	.word	0x2000022c
 8000e60:	40020000 	.word	0x40020000
 8000e64:	20000238 	.word	0x20000238
 8000e68:	200001f2 	.word	0x200001f2
 8000e6c:	20000198 	.word	0x20000198
 8000e70:	200001f4 	.word	0x200001f4

08000e74 <Listener_Excute>:

void Listener_Excute()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	Listener_CheckButton();
 8000e78:	f000 f804 	bl	8000e84 <Listener_CheckButton>
	Listener_CheckUART();
 8000e7c:	f000 f84e 	bl	8000f1c <Listener_CheckUART>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Listener_CheckButton>:

void Listener_CheckButton() { // check button state
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
	static uint32_t chkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();
 8000e8a:	f000 ff3d 	bl	8001d08 <HAL_GetTick>
 8000e8e:	60f8      	str	r0, [r7, #12]

	if(curTick - chkBtnTime < 10) return;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <Listener_CheckButton+0x88>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b09      	cmp	r3, #9
 8000e9a:	d932      	bls.n	8000f02 <Listener_CheckButton+0x7e>
	chkBtnTime = curTick;
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <Listener_CheckButton+0x88>)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6013      	str	r3, [r2, #0]

	inputData_TypeDef inputData;

	if (Button_GetState(&hBtnMode)== ACT_RELEASED) {
 8000ea2:	481b      	ldr	r0, [pc, #108]	@ (8000f10 <Listener_CheckButton+0x8c>)
 8000ea4:	f000 fb6a 	bl	800157c <Button_GetState>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d109      	bne.n	8000ec2 <Listener_CheckButton+0x3e>
		inputData.id = controlId_MODE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_MODE_ACT;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ebc:	f7ff ff14 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000ec0:	e020      	b.n	8000f04 <Listener_CheckButton+0x80>
	}
	if (Button_GetState(&hBtnRunStop)== ACT_PUSHED) {
 8000ec2:	4814      	ldr	r0, [pc, #80]	@ (8000f14 <Listener_CheckButton+0x90>)
 8000ec4:	f000 fb5a 	bl	800157c <Button_GetState>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d109      	bne.n	8000ee2 <Listener_CheckButton+0x5e>
		inputData.id = controlId_RUN_STOP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_STOPWATCH_ACT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000edc:	f7ff ff04 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000ee0:	e010      	b.n	8000f04 <Listener_CheckButton+0x80>
	}
	if (Button_GetState(&hBtnClear)== ACT_PUSHED) {
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <Listener_CheckButton+0x94>)
 8000ee4:	f000 fb4a 	bl	800157c <Button_GetState>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10a      	bne.n	8000f04 <Listener_CheckButton+0x80>
		inputData.id = controlId_BTN_CLEAR;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_STOPWATCH_ACT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000efc:	f7ff fef4 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000f00:	e000      	b.n	8000f04 <Listener_CheckButton+0x80>
	if(curTick - chkBtnTime < 10) return;
 8000f02:	bf00      	nop
	}
}
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000020c 	.word	0x2000020c
 8000f10:	20000220 	.word	0x20000220
 8000f14:	2000022c 	.word	0x2000022c
 8000f18:	20000238 	.word	0x20000238

08000f1c <Listener_CheckUART>:

void Listener_CheckUART() { // check UART rxData
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
	if(isQueEmpty(&uartRxQue)) return; // check UART rxFlag
 8000f22:	4821      	ldr	r0, [pc, #132]	@ (8000fa8 <Listener_CheckUART+0x8c>)
 8000f24:	f004 f87b 	bl	800501e <isQueEmpty>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d138      	bne.n	8000fa0 <Listener_CheckUART+0x84>
	int uartRxData = (int) deQue(&uartRxQue);
 8000f2e:	481e      	ldr	r0, [pc, #120]	@ (8000fa8 <Listener_CheckUART+0x8c>)
 8000f30:	f004 f8ad 	bl	800508e <deQue>
 8000f34:	4603      	mov	r3, r0
 8000f36:	60fb      	str	r3, [r7, #12]

	inputData_TypeDef inputData;

	if (uartRxData == 'm') {
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b6d      	cmp	r3, #109	@ 0x6d
 8000f3c:	d109      	bne.n	8000f52 <Listener_CheckUART+0x36>
		inputData.id = controlId_MODE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_MODE_ACT;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f4c:	f7ff fecc 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000f50:	e027      	b.n	8000fa2 <Listener_CheckUART+0x86>
	}
	if (uartRxData== 'r') {
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b72      	cmp	r3, #114	@ 0x72
 8000f56:	d109      	bne.n	8000f6c <Listener_CheckUART+0x50>
		inputData.id = controlId_RUN_STOP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_STOPWATCH_ACT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f66:	f7ff febf 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000f6a:	e01a      	b.n	8000fa2 <Listener_CheckUART+0x86>
	}
	if (uartRxData == 's') {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b73      	cmp	r3, #115	@ 0x73
 8000f70:	d109      	bne.n	8000f86 <Listener_CheckUART+0x6a>
		inputData.id = controlId_RUN_STOP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_STOPWATCH_ACT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f80:	f7ff feb2 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000f84:	e00d      	b.n	8000fa2 <Listener_CheckUART+0x86>
	}
	if (uartRxData == 'c') {
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b63      	cmp	r3, #99	@ 0x63
 8000f8a:	d10a      	bne.n	8000fa2 <Listener_CheckUART+0x86>
		inputData.id = controlId_BTN_CLEAR;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	607b      	str	r3, [r7, #4]
		inputData.data = controlData_STOPWATCH_ACT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	60bb      	str	r3, [r7, #8]
		Controller_SetInputData(inputData);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f9a:	f7ff fea5 	bl	8000ce8 <Controller_SetInputData>
		return;
 8000f9e:	e000      	b.n	8000fa2 <Listener_CheckUART+0x86>
	if(isQueEmpty(&uartRxQue)) return; // check UART rxFlag
 8000fa0:	bf00      	nop
	}
}
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001f4 	.word	0x200001f4

08000fac <Listener_UartCallBack>:

void Listener_UartCallBack() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rxData, 1);  //interrupt en
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4906      	ldr	r1, [pc, #24]	@ (8000fcc <Listener_UartCallBack+0x20>)
 8000fb4:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <Listener_UartCallBack+0x24>)
 8000fb6:	f003 f876 	bl	80040a6 <HAL_UART_Receive_IT>
	enQue(&uartRxQue, (void*) rxData);
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <Listener_UartCallBack+0x20>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4804      	ldr	r0, [pc, #16]	@ (8000fd4 <Listener_UartCallBack+0x28>)
 8000fc2:	f004 f83f 	bl	8005044 <enQue>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001f2 	.word	0x200001f2
 8000fd0:	20000198 	.word	0x20000198
 8000fd4:	200001f4 	.word	0x200001f4

08000fd8 <Presenter_Excute>:
	memcpy(&timewatch_disData, &timeWatchData, sizeof(Watch_t));
	memcpy(&stopwatch_disData, &stopWatchData, sizeof(Watch_t));
}

void Presenter_Excute()
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af02      	add	r7, sp, #8
	if (fnd_dispData.id == TIME_WATCH) {
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <Presenter_Excute+0x94>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <Presenter_Excute+0x1a>
		Presenter_DispTimeWatch(fnd_dispData);
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <Presenter_Excute+0x94>)
 8000fe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fec:	f000 f84a 	bl	8001084 <Presenter_DispTimeWatch>
 8000ff0:	e004      	b.n	8000ffc <Presenter_Excute+0x24>
	} else { // STOP_WATCH
		Presenter_DispStopWatch(fnd_dispData);
 8000ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <Presenter_Excute+0x94>)
 8000ff4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ff8:	f000 f858 	bl	80010ac <Presenter_DispStopWatch>
	}
	char str_timewatch[18];
	char str_stopwatch[18];
	sprintf(str_timewatch, "%02d:%02d:%02d", timewatch_disData.hour, timewatch_disData.min, timewatch_disData.sec);
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <Presenter_Excute+0x98>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	461a      	mov	r2, r3
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <Presenter_Excute+0x98>)
 8001004:	789b      	ldrb	r3, [r3, #2]
 8001006:	4619      	mov	r1, r3
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <Presenter_Excute+0x98>)
 800100a:	78db      	ldrb	r3, [r3, #3]
 800100c:	f107 0014 	add.w	r0, r7, #20
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	460b      	mov	r3, r1
 8001014:	4917      	ldr	r1, [pc, #92]	@ (8001074 <Presenter_Excute+0x9c>)
 8001016:	f004 f85f 	bl	80050d8 <siprintf>
	sprintf(str_stopwatch, "%02d:%02d:%02d.%02d", stopwatch_disData.hour, stopwatch_disData.min, stopwatch_disData.sec, stopwatch_disData.msec/10);
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <Presenter_Excute+0xa0>)
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	461c      	mov	r4, r3
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <Presenter_Excute+0xa0>)
 8001022:	789b      	ldrb	r3, [r3, #2]
 8001024:	461d      	mov	r5, r3
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <Presenter_Excute+0xa0>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	4619      	mov	r1, r3
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <Presenter_Excute+0xa0>)
 800102e:	889b      	ldrh	r3, [r3, #4]
 8001030:	4a12      	ldr	r2, [pc, #72]	@ (800107c <Presenter_Excute+0xa4>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	b29b      	uxth	r3, r3
 800103a:	4638      	mov	r0, r7
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	9100      	str	r1, [sp, #0]
 8001040:	462b      	mov	r3, r5
 8001042:	4622      	mov	r2, r4
 8001044:	490e      	ldr	r1, [pc, #56]	@ (8001080 <Presenter_Excute+0xa8>)
 8001046:	f004 f847 	bl	80050d8 <siprintf>
	LCD_WriteStringXY(0,0,str_timewatch);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	2000      	movs	r0, #0
 8001054:	f000 fddd 	bl	8001c12 <LCD_WriteStringXY>
	LCD_WriteStringXY(1,0,str_stopwatch);
 8001058:	463b      	mov	r3, r7
 800105a:	461a      	mov	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	2001      	movs	r0, #1
 8001060:	f000 fdd7 	bl	8001c12 <LCD_WriteStringXY>
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	@ 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000210 	.word	0x20000210
 8001074:	08005a30 	.word	0x08005a30
 8001078:	20000218 	.word	0x20000218
 800107c:	cccccccd 	.word	0xcccccccd
 8001080:	08005a40 	.word	0x08005a40

08001084 <Presenter_DispTimeWatch>:

void Presenter_DispTimeWatch(Watch_t watchData)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	463b      	mov	r3, r7
 800108c:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DisTimeWatchFnd(watchData);
 8001090:	463b      	mov	r3, r7
 8001092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001096:	f000 f81d 	bl	80010d4 <Presenter_DisTimeWatchFnd>
	Presenter_DisMonitorTimeWatch(watchData);
 800109a:	463b      	mov	r3, r7
 800109c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010a0:	f000 f89e 	bl	80011e0 <Presenter_DisMonitorTimeWatch>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Presenter_DispStopWatch>:
void Presenter_DispStopWatch(Watch_t watchData)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	463b      	mov	r3, r7
 80010b4:	e883 0003 	stmia.w	r3, {r0, r1}
	Presenter_DisStopWatchFnd(watchData);
 80010b8:	463b      	mov	r3, r7
 80010ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010be:	f000 f835 	bl	800112c <Presenter_DisStopWatchFnd>
	Presenter_DisMonitorStopWatch(watchData);
 80010c2:	463b      	mov	r3, r7
 80010c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010c8:	f000 f8b6 	bl	8001238 <Presenter_DisMonitorStopWatch>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <Presenter_DisTimeWatchFnd>:

void Presenter_DisTimeWatchFnd(Watch_t watchData){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	463b      	mov	r3, r7
 80010dc:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(watchData.hour*100 + watchData.min);
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	461a      	mov	r2, r3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	0091      	lsls	r1, r2, #2
 80010ec:	461a      	mov	r2, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	78ba      	ldrb	r2, [r7, #2]
 80010f8:	4413      	add	r3, r2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fa97 	bl	8001630 <FND_WriteData>
	FND_WriteDp(FND_DP_1000|FND_DP_10, FND_DP_OFF);
 8001102:	2100      	movs	r1, #0
 8001104:	200a      	movs	r0, #10
 8001106:	f000 fa6b 	bl	80015e0 <FND_WriteDp>
	if (watchData.msec < 500) {
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001110:	d204      	bcs.n	800111c <Presenter_DisTimeWatchFnd+0x48>
		FND_WriteDp(FND_DP_100, FND_DP_ON);
 8001112:	2101      	movs	r1, #1
 8001114:	2004      	movs	r0, #4
 8001116:	f000 fa63 	bl	80015e0 <FND_WriteDp>
	} else{
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
	}
}
 800111a:	e003      	b.n	8001124 <Presenter_DisTimeWatchFnd+0x50>
		FND_WriteDp(FND_DP_100, FND_DP_OFF);
 800111c:	2100      	movs	r1, #0
 800111e:	2004      	movs	r0, #4
 8001120:	f000 fa5e 	bl	80015e0 <FND_WriteDp>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Presenter_DisStopWatchFnd>:

void Presenter_DisStopWatchFnd(Watch_t watchData){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	463b      	mov	r3, r7
 8001134:	e883 0003 	stmia.w	r3, {r0, r1}
	FND_WriteData(((watchData.min % 10)*1000) + (watchData.sec*10) + (watchData.msec/100));
 8001138:	78ba      	ldrb	r2, [r7, #2]
 800113a:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <Presenter_DisStopWatchFnd+0xac>)
 800113c:	fba3 1302 	umull	r1, r3, r3, r2
 8001140:	08d9      	lsrs	r1, r3, #3
 8001142:	460b      	mov	r3, r1
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	0152      	lsls	r2, r2, #5
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4413      	add	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	b29a      	uxth	r2, r3
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	4619      	mov	r1, r3
 8001160:	0089      	lsls	r1, r1, #2
 8001162:	440b      	add	r3, r1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	4413      	add	r3, r2
 800116a:	b29a      	uxth	r2, r3
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	491b      	ldr	r1, [pc, #108]	@ (80011dc <Presenter_DisStopWatchFnd+0xb0>)
 8001170:	fba1 1303 	umull	r1, r3, r1, r3
 8001174:	095b      	lsrs	r3, r3, #5
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b29b      	uxth	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fa57 	bl	8001630 <FND_WriteData>
	FND_WriteDp(FND_DP_100|FND_DP_1, FND_DP_OFF);
 8001182:	2100      	movs	r1, #0
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fa2b 	bl	80015e0 <FND_WriteDp>

	if (watchData.msec%100 < 50) {
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <Presenter_DisStopWatchFnd+0xb0>)
 800118e:	fba2 1203 	umull	r1, r2, r2, r3
 8001192:	0952      	lsrs	r2, r2, #5
 8001194:	2164      	movs	r1, #100	@ 0x64
 8001196:	fb01 f202 	mul.w	r2, r1, r2
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b31      	cmp	r3, #49	@ 0x31
 80011a0:	d804      	bhi.n	80011ac <Presenter_DisStopWatchFnd+0x80>
		FND_WriteDp(FND_DP_10, FND_DP_ON);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2002      	movs	r0, #2
 80011a6:	f000 fa1b 	bl	80015e0 <FND_WriteDp>
 80011aa:	e003      	b.n	80011b4 <Presenter_DisStopWatchFnd+0x88>
	}else{
		FND_WriteDp(FND_DP_10, FND_DP_OFF);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	f000 fa16 	bl	80015e0 <FND_WriteDp>
	}
	if (watchData.msec < 500) {
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ba:	d204      	bcs.n	80011c6 <Presenter_DisStopWatchFnd+0x9a>
		FND_WriteDp(FND_DP_1000, FND_DP_ON);
 80011bc:	2101      	movs	r1, #1
 80011be:	2008      	movs	r0, #8
 80011c0:	f000 fa0e 	bl	80015e0 <FND_WriteDp>
	}else{
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
	}
}
 80011c4:	e003      	b.n	80011ce <Presenter_DisStopWatchFnd+0xa2>
		FND_WriteDp(FND_DP_1000, FND_DP_OFF);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2008      	movs	r0, #8
 80011ca:	f000 fa09 	bl	80015e0 <FND_WriteDp>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	51eb851f 	.word	0x51eb851f

080011e0 <Presenter_DisMonitorTimeWatch>:

void Presenter_DisMonitorTimeWatch(Watch_t watchData) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b093      	sub	sp, #76	@ 0x4c
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	463b      	mov	r3, r7
 80011e8:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	sprintf(str, "Time Watch : %02d:%02d:%02d.%03d\n",watchData.hour, watchData.min, watchData.sec, watchData.msec);
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	4619      	mov	r1, r3
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	461c      	mov	r4, r3
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	88ba      	ldrh	r2, [r7, #4]
 80011f8:	f107 000c 	add.w	r0, r7, #12
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4623      	mov	r3, r4
 8001202:	460a      	mov	r2, r1
 8001204:	490a      	ldr	r1, [pc, #40]	@ (8001230 <Presenter_DisMonitorTimeWatch+0x50>)
 8001206:	f003 ff67 	bl	80050d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffe6 	bl	80001e0 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f107 010c 	add.w	r1, r7, #12
 800121c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <Presenter_DisMonitorTimeWatch+0x54>)
 8001222:	f002 feb5 	bl	8003f90 <HAL_UART_Transmit>
}
 8001226:	bf00      	nop
 8001228:	3744      	adds	r7, #68	@ 0x44
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	08005a54 	.word	0x08005a54
 8001234:	20000198 	.word	0x20000198

08001238 <Presenter_DisMonitorStopWatch>:
void Presenter_DisMonitorStopWatch(Watch_t watchData) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b093      	sub	sp, #76	@ 0x4c
 800123c:	af02      	add	r7, sp, #8
 800123e:	463b      	mov	r3, r7
 8001240:	e883 0003 	stmia.w	r3, {r0, r1}
	char str[50];
	sprintf(str, "Stop Watch : %02d:%02d:%02d.%03d\n",watchData.hour, watchData.min, watchData.sec, watchData.msec);
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	4619      	mov	r1, r3
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	461c      	mov	r4, r3
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	88ba      	ldrh	r2, [r7, #4]
 8001250:	f107 000c 	add.w	r0, r7, #12
 8001254:	9201      	str	r2, [sp, #4]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	4623      	mov	r3, r4
 800125a:	460a      	mov	r2, r1
 800125c:	490a      	ldr	r1, [pc, #40]	@ (8001288 <Presenter_DisMonitorStopWatch+0x50>)
 800125e:	f003 ff3b 	bl	80050d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f7fe ffba 	bl	80001e0 <strlen>
 800126c:	4603      	mov	r3, r0
 800126e:	b29a      	uxth	r2, r3
 8001270:	f107 010c 	add.w	r1, r7, #12
 8001274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <Presenter_DisMonitorStopWatch+0x54>)
 800127a:	f002 fe89 	bl	8003f90 <HAL_UART_Transmit>
}
 800127e:	bf00      	nop
 8001280:	3744      	adds	r7, #68	@ 0x44
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	08005a78 	.word	0x08005a78
 800128c:	20000198 	.word	0x20000198

08001290 <Presenter_Init>:

void Presenter_Init() {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	LCD_Init(&hi2c1);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <Presenter_Init+0x10>)
 8001296:	f000 fb6d 	bl	8001974 <LCD_Init>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000f8 	.word	0x200000f8

080012a4 <HAL_TIM_PeriodElapsedCallback>:

volatile uint8_t dotBlink = 0;
volatile uint16_t blinkTick = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012b4:	d105      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		FND_DispDataCallBack();
 80012b6:	f000 f9cb 	bl	8001650 <FND_DispDataCallBack>
		TimeWatch_IncTimeCallBack();
 80012ba:	f000 f907 	bl	80014cc <TimeWatch_IncTimeCallBack>
		StopWatch_IncstopCallBack();
 80012be:	f000 f84d 	bl	800135c <StopWatch_IncstopCallBack>
	}
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_UART_RxCpltCallback+0x20>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d101      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x16>
		Listener_UartCallBack();
 80012de:	f7ff fe65 	bl	8000fac <Listener_UartCallBack>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004400 	.word	0x40004400

080012f0 <ap_main>:


int ap_main()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <ap_main+0x1c>)
 80012f6:	f002 fa17 	bl	8003728 <HAL_TIM_Base_Start_IT>
	while (1) {
		Listener_Excute();
 80012fa:	f7ff fdbb 	bl	8000e74 <Listener_Excute>
		Controller_Excute();
 80012fe:	f7ff fceb 	bl	8000cd8 <Controller_Excute>
		Presenter_Excute();
 8001302:	f7ff fe69 	bl	8000fd8 <Presenter_Excute>
		Listener_Excute();
 8001306:	bf00      	nop
 8001308:	e7f7      	b.n	80012fa <ap_main+0xa>
 800130a:	bf00      	nop
 800130c:	20000150 	.word	0x20000150

08001310 <ap_init>:
	}
	return 0;
}
void ap_init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	Listener_Init();
 8001314:	f7ff fd82 	bl	8000e1c <Listener_Init>
	Presenter_Init();
 8001318:	f7ff ffba 	bl	8001290 <Presenter_Init>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <get_stopwatch>:

extern inputData_TypeDef controlData;
static stopWatch_s stopWatchstate = STOP;
static Watch_t stopWatch = {STOP_WATCH, 0, 0, 0, 0};

Watch_t get_stopwatch(){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	return stopWatch;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <get_stopwatch+0x20>)
 800132c:	6810      	ldr	r0, [r2, #0]
 800132e:	6018      	str	r0, [r3, #0]
 8001330:	8892      	ldrh	r2, [r2, #4]
 8001332:	809a      	strh	r2, [r3, #4]
}
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000014 	.word	0x20000014

08001344 <get_stopwatchState>:

stopWatch_s get_stopwatchState() {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	return stopWatchstate;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <get_stopwatchState+0x14>)
 800134a:	781b      	ldrb	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000021e 	.word	0x2000021e

0800135c <StopWatch_IncstopCallBack>:

void StopWatch_IncstopCallBack(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	if (stopWatchstate == RUN) {
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <StopWatch_IncstopCallBack+0x14>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <StopWatch_IncstopCallBack+0x10>
		StopWatch_Incstop();
 8001368:	f000 f804 	bl	8001374 <StopWatch_Incstop>
	}
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000021e 	.word	0x2000021e

08001374 <StopWatch_Incstop>:

void StopWatch_Incstop()
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	if (stopWatch.msec < 1000 - 1) {
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <StopWatch_Incstop+0x80>)
 800137a:	889b      	ldrh	r3, [r3, #4]
 800137c:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001380:	4293      	cmp	r3, r2
 8001382:	d806      	bhi.n	8001392 <StopWatch_Incstop+0x1e>
		stopWatch.msec++;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <StopWatch_Incstop+0x80>)
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <StopWatch_Incstop+0x80>)
 800138e:	809a      	strh	r2, [r3, #4]
		return;
 8001390:	e02c      	b.n	80013ec <StopWatch_Incstop+0x78>
	} else {
		stopWatch.msec = 0;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <StopWatch_Incstop+0x80>)
 8001394:	2200      	movs	r2, #0
 8001396:	809a      	strh	r2, [r3, #4]
	}
	if (stopWatch.sec < 60 - 1) {
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <StopWatch_Incstop+0x80>)
 800139a:	78db      	ldrb	r3, [r3, #3]
 800139c:	2b3a      	cmp	r3, #58	@ 0x3a
 800139e:	d806      	bhi.n	80013ae <StopWatch_Incstop+0x3a>
		stopWatch.sec++;
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013aa:	70da      	strb	r2, [r3, #3]
		return;
 80013ac:	e01e      	b.n	80013ec <StopWatch_Incstop+0x78>
	} else{
		stopWatch.sec = 0;
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	70da      	strb	r2, [r3, #3]
	}

	if (stopWatch.min < 60 - 1) {
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80013ba:	d806      	bhi.n	80013ca <StopWatch_Incstop+0x56>
		stopWatch.min++;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013c6:	709a      	strb	r2, [r3, #2]
		return;
 80013c8:	e010      	b.n	80013ec <StopWatch_Incstop+0x78>
	}
	stopWatch.min = 0;
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	709a      	strb	r2, [r3, #2]

	if (stopWatch.hour < 24 - 1) {
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	2b16      	cmp	r3, #22
 80013d6:	d806      	bhi.n	80013e6 <StopWatch_Incstop+0x72>
		stopWatch.hour++;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013e2:	705a      	strb	r2, [r3, #1]
		return;
 80013e4:	e002      	b.n	80013ec <StopWatch_Incstop+0x78>
	}
	stopWatch.hour = 0;
 80013e6:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <StopWatch_Incstop+0x80>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	705a      	strb	r2, [r3, #1]
}
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	20000014 	.word	0x20000014

080013f8 <StopWatch_Stop>:


void StopWatch_Stop(){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	if (controlData.id == controlId_RUN_STOP || controlData.id == controlId_RUN) {
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <StopWatch_Stop+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d003      	beq.n	800140c <StopWatch_Stop+0x14>
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <StopWatch_Stop+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d106      	bne.n	800141a <StopWatch_Stop+0x22>
		controlData.id = controlId_NO_CONTROL;
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <StopWatch_Stop+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		stopWatchstate = RUN;
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <StopWatch_Stop+0x44>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
	} else if (controlData.id == controlId_BTN_CLEAR) {
		controlData.id = controlId_NO_CONTROL;
		stopWatchstate = CLEAR;
	}
}
 8001418:	e009      	b.n	800142e <StopWatch_Stop+0x36>
	} else if (controlData.id == controlId_BTN_CLEAR) {
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <StopWatch_Stop+0x40>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d105      	bne.n	800142e <StopWatch_Stop+0x36>
		controlData.id = controlId_NO_CONTROL;
 8001422:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <StopWatch_Stop+0x40>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
		stopWatchstate = CLEAR;
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <StopWatch_Stop+0x44>)
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	200001e4 	.word	0x200001e4
 800143c:	2000021e 	.word	0x2000021e

08001440 <StopWatch_Run>:
void StopWatch_Run(){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	if (controlData.id == controlId_RUN_STOP || controlData.id == controlId_STOP) {
 8001444:	4b09      	ldr	r3, [pc, #36]	@ (800146c <StopWatch_Run+0x2c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d003      	beq.n	8001454 <StopWatch_Run+0x14>
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <StopWatch_Run+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d105      	bne.n	8001460 <StopWatch_Run+0x20>
		controlData.id = controlId_NO_CONTROL;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <StopWatch_Run+0x2c>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		stopWatchstate = STOP;
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <StopWatch_Run+0x30>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	}
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200001e4 	.word	0x200001e4
 8001470:	2000021e 	.word	0x2000021e

08001474 <StopWatch_Clear>:
void StopWatch_Clear()
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
	stopWatchstate = STOP;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <StopWatch_Clear+0x2c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	stopWatch.msec = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <StopWatch_Clear+0x30>)
 8001480:	2200      	movs	r2, #0
 8001482:	809a      	strh	r2, [r3, #4]
	stopWatch.sec = 0;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <StopWatch_Clear+0x30>)
 8001486:	2200      	movs	r2, #0
 8001488:	70da      	strb	r2, [r3, #3]
	stopWatch.min = 0;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <StopWatch_Clear+0x30>)
 800148c:	2200      	movs	r2, #0
 800148e:	709a      	strb	r2, [r3, #2]
	stopWatch.hour = 0;
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <StopWatch_Clear+0x30>)
 8001492:	2200      	movs	r2, #0
 8001494:	705a      	strb	r2, [r3, #1]
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	2000021e 	.word	0x2000021e
 80014a4:	20000014 	.word	0x20000014

080014a8 <get_timewatch>:
#include "timeWatch.h"


static Watch_t timeWatch = {TIME_WATCH, 12,0,0,0};

Watch_t get_timewatch(){
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	return timeWatch;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <get_timewatch+0x20>)
 80014b4:	6810      	ldr	r0, [r2, #0]
 80014b6:	6018      	str	r0, [r3, #0]
 80014b8:	8892      	ldrh	r2, [r2, #4]
 80014ba:	809a      	strh	r2, [r3, #4]
}
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	2000001c 	.word	0x2000001c

080014cc <TimeWatch_IncTimeCallBack>:

void TimeWatch_IncTimeCallBack() //interrupt에 들어가는 함수(interrupt로 인하여 갑자기 실행됨?)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	if (timeWatch.msec < 1000 - 1) {
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80014d8:	4293      	cmp	r3, r2
 80014da:	d806      	bhi.n	80014ea <TimeWatch_IncTimeCallBack+0x1e>
		timeWatch.msec++;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014e6:	809a      	strh	r2, [r3, #4]
		return;
 80014e8:	e02c      	b.n	8001544 <TimeWatch_IncTimeCallBack+0x78>
	} else {
		timeWatch.msec = 0;
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	809a      	strh	r2, [r3, #4]
	}
	if (timeWatch.sec < 60 - 1) {
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80014f6:	d806      	bhi.n	8001506 <TimeWatch_IncTimeCallBack+0x3a>
		timeWatch.sec++;
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001502:	70da      	strb	r2, [r3, #3]
		return;
 8001504:	e01e      	b.n	8001544 <TimeWatch_IncTimeCallBack+0x78>
	} else{
		timeWatch.sec = 0;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001508:	2200      	movs	r2, #0
 800150a:	70da      	strb	r2, [r3, #3]
	}

	if (timeWatch.min < 60 - 1) {
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b3a      	cmp	r3, #58	@ 0x3a
 8001512:	d806      	bhi.n	8001522 <TimeWatch_IncTimeCallBack+0x56>
		timeWatch.min++;
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 800151e:	709a      	strb	r2, [r3, #2]
		return;
 8001520:	e010      	b.n	8001544 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.min = 0;
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001524:	2200      	movs	r2, #0
 8001526:	709a      	strb	r2, [r3, #2]

	if (timeWatch.hour < 24 - 1) {
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b16      	cmp	r3, #22
 800152e:	d806      	bhi.n	800153e <TimeWatch_IncTimeCallBack+0x72>
		timeWatch.hour++;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 800153a:	705a      	strb	r2, [r3, #1]
		return;
 800153c:	e002      	b.n	8001544 <TimeWatch_IncTimeCallBack+0x78>
	}
	timeWatch.hour = 0;
 800153e:	4b03      	ldr	r3, [pc, #12]	@ (800154c <TimeWatch_IncTimeCallBack+0x80>)
 8001540:	2200      	movs	r2, #0
 8001542:	705a      	strb	r2, [r3, #1]
}
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	2000001c 	.word	0x2000001c

08001550 <Button_Init>:

Button_Handler_t hBtnMode;
Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint16_t pinNum){
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	4613      	mov	r3, r2
 800155c:	80fb      	strh	r3, [r7, #6]
	hbtn->GPIOx = GPIOx;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	809a      	strh	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	609a      	str	r2, [r3, #8]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = HAL_GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	889b      	ldrh	r3, [r3, #4]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f000 ff12 	bl	80023b8 <HAL_GPIO_ReadPin>
 8001594:	4603      	mov	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)) { // button released -> pushed
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10a      	bne.n	80015b6 <Button_GetState+0x3a>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <Button_GetState+0x3a>
		HAL_Delay(2);//debounce code
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 fbba 	bl	8001d20 <HAL_Delay>
		hbtn->prevState = PUSHED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <Button_GetState+0x5a>
	} else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)) { // button pushed -> released
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <Button_GetState+0x58>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <Button_GetState+0x58>
		HAL_Delay(2);//debounce code
 80015c4:	2002      	movs	r0, #2
 80015c6:	f000 fbab 	bl	8001d20 <HAL_Delay>
		hbtn->prevState = RELEASED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80015d0:	2302      	movs	r3, #2
 80015d2:	e000      	b.n	80015d6 <Button_GetState+0x5a>
	}
	return NO_ACT;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <FND_WriteDp>:
static uint16_t fndDispNum = 0; // FND display main data(외부 파일에서 접근XXX)

// write fndDisNum


void FND_WriteDp(uint8_t dpData, uint8_t dpState){
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
	if (dpState == FND_DP_ON) {
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <FND_WriteDp+0x26>
		fndDispDp |= dpData;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <FND_WriteDp+0x4c>)
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <FND_WriteDp+0x4c>)
 8001602:	701a      	strb	r2, [r3, #0]
	} else{
		fndDispDp &= ~dpData;
	}
}
 8001604:	e00b      	b.n	800161e <FND_WriteDp+0x3e>
		fndDispDp &= ~dpData;
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	43db      	mvns	r3, r3
 800160c:	b25a      	sxtb	r2, r3
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <FND_WriteDp+0x4c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4013      	ands	r3, r2
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <FND_WriteDp+0x4c>)
 800161c:	701a      	strb	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000244 	.word	0x20000244

08001630 <FND_WriteData>:

void FND_WriteData(uint16_t data)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
	fndDispNum = data;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <FND_WriteData+0x1c>)
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	8013      	strh	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000246 	.word	0x20000246

08001650 <FND_DispDataCallBack>:
	return fndDispNum;
}

// display fndDisNum
void FND_DispDataCallBack()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	static int digitPos = 0; // digit 자리 표현 변수
	// interrupt 발생하면 한 자리씩 출력한다.
	digitPos = (digitPos + 1) % 8; // 0~3까지 출력 반복
 8001654:	4b80      	ldr	r3, [pc, #512]	@ (8001858 <FND_DispDataCallBack+0x208>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	425a      	negs	r2, r3
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	f002 0207 	and.w	r2, r2, #7
 8001664:	bf58      	it	pl
 8001666:	4253      	negpl	r3, r2
 8001668:	4a7b      	ldr	r2, [pc, #492]	@ (8001858 <FND_DispDataCallBack+0x208>)
 800166a:	6013      	str	r3, [r2, #0]

	switch(digitPos)
 800166c:	4b7a      	ldr	r3, [pc, #488]	@ (8001858 <FND_DispDataCallBack+0x208>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b07      	cmp	r3, #7
 8001672:	f200 80ee 	bhi.w	8001852 <FND_DispDataCallBack+0x202>
 8001676:	a201      	add	r2, pc, #4	@ (adr r2, 800167c <FND_DispDataCallBack+0x2c>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	0800169d 	.word	0x0800169d
 8001680:	080016cb 	.word	0x080016cb
 8001684:	08001703 	.word	0x08001703
 8001688:	0800173b 	.word	0x0800173b
 800168c:	08001773 	.word	0x08001773
 8001690:	080017ab 	.word	0x080017ab
 8001694:	080017e3 	.word	0x080017e3
 8001698:	0800181b 	.word	0x0800181b
	{
	// 계속 켜져있으면 FND 켜져있을 때 데이터가 바뀌면서 잔상이 생긴다
	// -> FND를 끄고 데이터를 바꾸고 다시 킨다.
	case DIGIT_1:
		FND_DispOffALL();
 800169c:	f000 f900 	bl	80018a0 <FND_DispOffALL>
		FND_DispDigit(fndDispNum%10);
 80016a0:	4b6e      	ldr	r3, [pc, #440]	@ (800185c <FND_DispDataCallBack+0x20c>)
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001860 <FND_DispDataCallBack+0x210>)
 80016a6:	fba3 1302 	umull	r1, r3, r3, r2
 80016aa:	08d9      	lsrs	r1, r3, #3
 80016ac:	460b      	mov	r3, r1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f913 	bl	80018e4 <FND_DispDigit>
		FND_DispOn(digitPos);
 80016be:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <FND_DispDataCallBack+0x208>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f8d4 	bl	8001870 <FND_DispOn>
		break;
 80016c8:	e0c3      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_10:
		FND_DispOffALL();
 80016ca:	f000 f8e9 	bl	80018a0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/10)%10);
 80016ce:	4b63      	ldr	r3, [pc, #396]	@ (800185c <FND_DispDataCallBack+0x20c>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	4a63      	ldr	r2, [pc, #396]	@ (8001860 <FND_DispDataCallBack+0x210>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b60      	ldr	r3, [pc, #384]	@ (8001860 <FND_DispDataCallBack+0x210>)
 80016de:	fba3 1302 	umull	r1, r3, r3, r2
 80016e2:	08d9      	lsrs	r1, r3, #3
 80016e4:	460b      	mov	r3, r1
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f8f7 	bl	80018e4 <FND_DispDigit>
		FND_DispOn(digitPos);
 80016f6:	4b58      	ldr	r3, [pc, #352]	@ (8001858 <FND_DispDataCallBack+0x208>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f8b8 	bl	8001870 <FND_DispOn>
		break;
 8001700:	e0a7      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_100:
		FND_DispOffALL();
 8001702:	f000 f8cd 	bl	80018a0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum /100)%10);
 8001706:	4b55      	ldr	r3, [pc, #340]	@ (800185c <FND_DispDataCallBack+0x20c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	4a56      	ldr	r2, [pc, #344]	@ (8001864 <FND_DispDataCallBack+0x214>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	095b      	lsrs	r3, r3, #5
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b52      	ldr	r3, [pc, #328]	@ (8001860 <FND_DispDataCallBack+0x210>)
 8001716:	fba3 1302 	umull	r1, r3, r3, r2
 800171a:	08d9      	lsrs	r1, r3, #3
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f000 f8db 	bl	80018e4 <FND_DispDigit>
		FND_DispOn(digitPos);
 800172e:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <FND_DispDataCallBack+0x208>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f89c 	bl	8001870 <FND_DispOn>
		break;
 8001738:	e08b      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_1000:
		FND_DispOffALL();
 800173a:	f000 f8b1 	bl	80018a0 <FND_DispOffALL>
		FND_DispDigit((fndDispNum/1000)%10);
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <FND_DispDataCallBack+0x20c>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	4a49      	ldr	r2, [pc, #292]	@ (8001868 <FND_DispDataCallBack+0x218>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <FND_DispDataCallBack+0x210>)
 800174e:	fba3 1302 	umull	r1, r3, r3, r2
 8001752:	08d9      	lsrs	r1, r3, #3
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f8bf 	bl	80018e4 <FND_DispDigit>
		FND_DispOn(digitPos);
 8001766:	4b3c      	ldr	r3, [pc, #240]	@ (8001858 <FND_DispDataCallBack+0x208>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f880 	bl	8001870 <FND_DispOn>
		break;
 8001770:	e06f      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1:
		FND_DispOffALL();
 8001772:	f000 f895 	bl	80018a0 <FND_DispOffALL>
		if (fndDispDp & (1<<0)) {
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <FND_DispDataCallBack+0x21c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <FND_DispDataCallBack+0x13a>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 8001782:	200a      	movs	r0, #10
 8001784:	f000 f8ae 	bl	80018e4 <FND_DispDigit>
 8001788:	e002      	b.n	8001790 <FND_DispDataCallBack+0x140>
		}else {
			FND_DispDigit(11);
 800178a:	200b      	movs	r0, #11
 800178c:	f000 f8aa 	bl	80018e4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <FND_DispDataCallBack+0x208>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	425a      	negs	r2, r3
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	bf58      	it	pl
 80017a0:	4253      	negpl	r3, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f864 	bl	8001870 <FND_DispOn>
		break;
 80017a8:	e053      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_10:
		FND_DispOffALL();
 80017aa:	f000 f879 	bl	80018a0 <FND_DispOffALL>
		if (fndDispDp & (1<<1)) {
 80017ae:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <FND_DispDataCallBack+0x21c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <FND_DispDataCallBack+0x172>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 f892 	bl	80018e4 <FND_DispDigit>
 80017c0:	e002      	b.n	80017c8 <FND_DispDataCallBack+0x178>
		}else {
			FND_DispDigit(11);
 80017c2:	200b      	movs	r0, #11
 80017c4:	f000 f88e 	bl	80018e4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <FND_DispDataCallBack+0x208>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	425a      	negs	r2, r3
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	bf58      	it	pl
 80017d8:	4253      	negpl	r3, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f848 	bl	8001870 <FND_DispOn>
		break;
 80017e0:	e037      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_100:
		FND_DispOffALL();
 80017e2:	f000 f85d 	bl	80018a0 <FND_DispOffALL>
		if (fndDispDp & (1<<2)) {
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <FND_DispDataCallBack+0x21c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <FND_DispDataCallBack+0x1aa>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 f876 	bl	80018e4 <FND_DispDigit>
 80017f8:	e002      	b.n	8001800 <FND_DispDataCallBack+0x1b0>
		}else {
			FND_DispDigit(11);
 80017fa:	200b      	movs	r0, #11
 80017fc:	f000 f872 	bl	80018e4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <FND_DispDataCallBack+0x208>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	425a      	negs	r2, r3
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	f002 0203 	and.w	r2, r2, #3
 800180e:	bf58      	it	pl
 8001810:	4253      	negpl	r3, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f82c 	bl	8001870 <FND_DispOn>
		break;
 8001818:	e01b      	b.n	8001852 <FND_DispDataCallBack+0x202>
	case DIGIT_DP_1000:
		FND_DispOffALL();
 800181a:	f000 f841 	bl	80018a0 <FND_DispOffALL>
		if (fndDispDp & (1<<3)) {
 800181e:	4b13      	ldr	r3, [pc, #76]	@ (800186c <FND_DispDataCallBack+0x21c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <FND_DispDataCallBack+0x1e2>
			FND_DispDigit(10);//불을 키고 싶으면 10을 넣고 아니라면 11으로 넣으면 됨 Digit에 해당하는 변수에서(해당 인덱스의 값이 나타남)
 800182a:	200a      	movs	r0, #10
 800182c:	f000 f85a 	bl	80018e4 <FND_DispDigit>
 8001830:	e002      	b.n	8001838 <FND_DispDataCallBack+0x1e8>
		}else {
			FND_DispDigit(11);
 8001832:	200b      	movs	r0, #11
 8001834:	f000 f856 	bl	80018e4 <FND_DispDigit>
		}
		FND_DispOn(digitPos%4);
 8001838:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <FND_DispDataCallBack+0x208>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	425a      	negs	r2, r3
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	bf58      	it	pl
 8001848:	4253      	negpl	r3, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f810 	bl	8001870 <FND_DispOn>
		break;
 8001850:	bf00      	nop
	}
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000248 	.word	0x20000248
 800185c:	20000246 	.word	0x20000246
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	51eb851f 	.word	0x51eb851f
 8001868:	10624dd3 	.word	0x10624dd3
 800186c:	20000244 	.word	0x20000244

08001870 <FND_DispOn>:
//   // GPIO_WritePin(GPIOx, PiNum, SET); - Cathode type(Anode type은 반대)
//   HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
//}

void FND_DispOn(int fndPos)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	// GPIO_WritePin(GPIOx, PiNum, RESET); - Cathode type(Anode type은 반대)
	HAL_GPIO_WritePin(fndDigitCom[fndPos].GPIOx, fndDigitCom[fndPos].pinNum, SET);
 8001878:	4a08      	ldr	r2, [pc, #32]	@ (800189c <FND_DispOn+0x2c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <FND_DispOn+0x2c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	b29b      	uxth	r3, r3
 800188c:	2201      	movs	r2, #1
 800188e:	4619      	mov	r1, r3
 8001890:	f000 fdaa 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000024 	.word	0x20000024

080018a0 <FND_DispOffALL>:

void FND_DispOffALL()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	for(int i=0; i<4; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e010      	b.n	80018ce <FND_DispOffALL+0x2e>
		HAL_GPIO_WritePin(fndDigitCom[i].GPIOx, fndDigitCom[i].pinNum, RESET);
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <FND_DispOffALL+0x40>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <FND_DispOffALL+0x40>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	f000 fd90 	bl	80023e8 <HAL_GPIO_WritePin>
	for(int i=0; i<4; i++){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	ddeb      	ble.n	80018ac <FND_DispOffALL+0xc>
	}
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000024 	.word	0x20000024

080018e4 <FND_DispDigit>:

void FND_DispDigit(uint16_t digit)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
	const uint8_t segFont[12] = {
 80018ee:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <FND_DispDigit+0x88>)
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x7F, // 8
			0x6F,  // 9
			0x80, //dp => 10000000
			0x00 // dp => 00000000
	};
	for(int i=0; i<8; i++){
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e02c      	b.n	800195a <FND_DispDigit+0x76>
		if(!(segFont[digit] & (1<<i))){
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	3318      	adds	r3, #24
 8001904:	443b      	add	r3, r7
 8001906:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800190a:	461a      	mov	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa42 f303 	asr.w	r3, r2, r3
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <FND_DispDigit+0x54>
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, SET);    // data = 0 -> offCathode type(Anode type은 반대)
 800191a:	4a15      	ldr	r2, [pc, #84]	@ (8001970 <FND_DispDigit+0x8c>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001922:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <FND_DispDigit+0x8c>)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	2201      	movs	r2, #1
 8001930:	4619      	mov	r1, r3
 8001932:	f000 fd59 	bl	80023e8 <HAL_GPIO_WritePin>
 8001936:	e00d      	b.n	8001954 <FND_DispDigit+0x70>
		}
		else{
			HAL_GPIO_WritePin(fndPin[i].GPIOx, fndPin[i].pinNum, RESET);      // data = 1 -> onCathode type(Anode type은 반대)
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <FND_DispDigit+0x8c>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <FND_DispDigit+0x8c>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	b29b      	uxth	r3, r3
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	f000 fd4a 	bl	80023e8 <HAL_GPIO_WritePin>
	for(int i=0; i<8; i++){
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b07      	cmp	r3, #7
 800195e:	ddcf      	ble.n	8001900 <FND_DispDigit+0x1c>
		}
	}
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08005a9c 	.word	0x08005a9c
 8001970:	20000044 	.word	0x20000044

08001974 <LCD_Init>:

static uint8_t lcdData = 0;
static I2C_HandleTypeDef *hLcdI2C;

void LCD_Init(I2C_HandleTypeDef *hI2C)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
   hLcdI2C = hI2C;
 800197c:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <LCD_Init+0x6c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
   HAL_Delay(50);
 8001982:	2032      	movs	r0, #50	@ 0x32
 8001984:	f000 f9cc 	bl	8001d20 <HAL_Delay>
   LCD_cmdMode();
 8001988:	f000 f852 	bl	8001a30 <LCD_cmdMode>
   LCD_writeMode();
 800198c:	f000 f874 	bl	8001a78 <LCD_writeMode>
   LCD_sendNibbleData(0x30);
 8001990:	2030      	movs	r0, #48	@ 0x30
 8001992:	f000 f8a7 	bl	8001ae4 <LCD_sendNibbleData>
   HAL_Delay(5); // wait over 4.1ms
 8001996:	2005      	movs	r0, #5
 8001998:	f000 f9c2 	bl	8001d20 <HAL_Delay>
   LCD_sendNibbleData(0x30);
 800199c:	2030      	movs	r0, #48	@ 0x30
 800199e:	f000 f8a1 	bl	8001ae4 <LCD_sendNibbleData>
   HAL_Delay(1); // wait over 100us
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 f9bc 	bl	8001d20 <HAL_Delay>
   LCD_sendNibbleData(0x30);
 80019a8:	2030      	movs	r0, #48	@ 0x30
 80019aa:	f000 f89b 	bl	8001ae4 <LCD_sendNibbleData>
   LCD_sendNibbleData(0x20);
 80019ae:	2020      	movs	r0, #32
 80019b0:	f000 f898 	bl	8001ae4 <LCD_sendNibbleData>
   LCD_sendData(LCD_4BIT_FUNC_SET);
 80019b4:	2028      	movs	r0, #40	@ 0x28
 80019b6:	f000 f8b9 	bl	8001b2c <LCD_sendData>
   LCD_sendData(LCD_DISP_OFF);
 80019ba:	2008      	movs	r0, #8
 80019bc:	f000 f8b6 	bl	8001b2c <LCD_sendData>
   LCD_sendData(LCD_DISP_CLEAR);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f000 f8b3 	bl	8001b2c <LCD_sendData>
   LCD_sendData(LCD_ENTRY_MODE_SET);
 80019c6:	2006      	movs	r0, #6
 80019c8:	f000 f8b0 	bl	8001b2c <LCD_sendData>
   LCD_sendData(LCD_DISP_ON);
 80019cc:	200c      	movs	r0, #12
 80019ce:	f000 f8ad 	bl	8001b2c <LCD_sendData>
   LCD_backLightOn();
 80019d2:	f000 f81d 	bl	8001a10 <LCD_backLightOn>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000250 	.word	0x20000250

080019e4 <LCD_sendI2C>:

void LCD_sendI2C(uint8_t data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
   HAL_I2C_Master_Transmit(hLcdI2C, (LCD_DEV_ADDR<<1), &data, 1, 1000);
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <LCD_sendI2C+0x28>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	1dfa      	adds	r2, r7, #7
 80019f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	214e      	movs	r1, #78	@ 0x4e
 80019fe:	f000 fe51 	bl	80026a4 <HAL_I2C_Master_Transmit>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000250 	.word	0x20000250

08001a10 <LCD_backLightOn>:

void LCD_backLightOn()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
   lcdData |= (1<<LCD_BL);
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <LCD_backLightOn+0x1c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <LCD_backLightOn+0x1c>)
 8001a20:	701a      	strb	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	2000024c 	.word	0x2000024c

08001a30 <LCD_cmdMode>:
{
   lcdData &= ~(1<<LCD_BL);
}

void LCD_cmdMode()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_RS);
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <LCD_cmdMode+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <LCD_cmdMode+0x20>)
 8001a40:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <LCD_cmdMode+0x20>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffcc 	bl	80019e4 <LCD_sendI2C>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000024c 	.word	0x2000024c

08001a54 <LCD_charMode>:

void LCD_charMode()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
   lcdData |= (1<<LCD_RS);
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <LCD_charMode+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <LCD_charMode+0x20>)
 8001a64:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001a66:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <LCD_charMode+0x20>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ffba 	bl	80019e4 <LCD_sendI2C>
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000024c 	.word	0x2000024c

08001a78 <LCD_writeMode>:

void LCD_writeMode()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_RW);
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <LCD_writeMode+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f023 0302 	bic.w	r3, r3, #2
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <LCD_writeMode+0x20>)
 8001a88:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001a8a:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <LCD_writeMode+0x20>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ffa8 	bl	80019e4 <LCD_sendI2C>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000024c 	.word	0x2000024c

08001a9c <LCD_E_High>:

void LCD_E_High()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
   lcdData |= (1<<LCD_E);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <LCD_E_High+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b04      	ldr	r3, [pc, #16]	@ (8001abc <LCD_E_High+0x20>)
 8001aac:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001aae:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <LCD_E_High+0x20>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff96 	bl	80019e4 <LCD_sendI2C>
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000024c 	.word	0x2000024c

08001ac0 <LCD_E_Low>:

void LCD_E_Low()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
   lcdData &= ~(1<<LCD_E);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <LCD_E_Low+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <LCD_E_Low+0x20>)
 8001ad0:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001ad2:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <LCD_E_Low+0x20>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff84 	bl	80019e4 <LCD_sendI2C>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000024c 	.word	0x2000024c

08001ae4 <LCD_sendNibbleData>:

// Nibble -> 4bit data를 전송
void LCD_sendNibbleData(uint8_t data)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
   LCD_E_High();
 8001aee:	f7ff ffd5 	bl	8001a9c <LCD_E_High>
   lcdData = (data & 0xf0) | (lcdData & 0x0f);
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	f023 030f 	bic.w	r3, r3, #15
 8001afa:	b25a      	sxtb	r2, r3
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <LCD_sendNibbleData+0x44>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <LCD_sendNibbleData+0x44>)
 8001b10:	701a      	strb	r2, [r3, #0]
   LCD_sendI2C(lcdData);
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <LCD_sendNibbleData+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff64 	bl	80019e4 <LCD_sendI2C>
   LCD_E_Low();
 8001b1c:	f7ff ffd0 	bl	8001ac0 <LCD_E_Low>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000024c 	.word	0x2000024c

08001b2c <LCD_sendData>:

void LCD_sendData(uint8_t data)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
   // High 4bit
   LCD_sendNibbleData(data);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ffd3 	bl	8001ae4 <LCD_sendNibbleData>

   data = data << 4;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	71fb      	strb	r3, [r7, #7]
   // Low 4bit
   LCD_sendNibbleData(data);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffcc 	bl	8001ae4 <LCD_sendNibbleData>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
   LCD_writeMode();
 8001b5e:	f7ff ff8b 	bl	8001a78 <LCD_writeMode>
   LCD_cmdMode();
 8001b62:	f7ff ff65 	bl	8001a30 <LCD_cmdMode>
   LCD_sendData(data);
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ffdf 	bl	8001b2c <LCD_sendData>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <LCD_writeCharData>:

void LCD_writeCharData(uint8_t data)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
   LCD_writeMode();
 8001b80:	f7ff ff7a 	bl	8001a78 <LCD_writeMode>
   LCD_charMode();
 8001b84:	f7ff ff66 	bl	8001a54 <LCD_charMode>
   LCD_sendData(data);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffce 	bl	8001b2c <LCD_sendData>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <LCD_writeStringData>:


void LCD_writeStringData(char* data)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	for(int i = 0; data[i]; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e009      	b.n	8001bba <LCD_writeStringData+0x22>
		LCD_writeCharData(data[i]);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ffe1 	bl	8001b76 <LCD_writeCharData>
	for(int i = 0; data[i]; i++)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ef      	bne.n	8001ba6 <LCD_writeStringData+0xe>
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460a      	mov	r2, r1
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	71fb      	strb	r3, [r7, #7]
	uint8_t lcdRegAddr = (0x40 * row) + col;
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	019b      	lsls	r3, r3, #6
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	3b80      	subs	r3, #128	@ 0x80
 8001c00:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ffa5 	bl	8001b54 <LCD_writeCmdData>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char* str){
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	603a      	str	r2, [r7, #0]
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001c22:	79ba      	ldrb	r2, [r7, #6]
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ffd1 	bl	8001bd0 <LCD_gotoXY>
	LCD_writeStringData(str);
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f7ff ffb2 	bl	8001b98 <LCD_writeStringData>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_Init+0x40>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_Init+0x40>)
 8001c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_Init+0x40>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f94f 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	200f      	movs	r0, #15
 8001c6c:	f000 f808 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7fe fe44 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_InitTick+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_InitTick+0x58>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f967 	bl	8001f72 <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d80a      	bhi.n	8001cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 f92f 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc0:	4a06      	ldr	r2, [pc, #24]	@ (8001cdc <HAL_InitTick+0x5c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000088 	.word	0x20000088
 8001cdc:	20000084 	.word	0x20000084

08001ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_IncTick+0x20>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x24>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <HAL_IncTick+0x24>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000088 	.word	0x20000088
 8001d04:	20000254 	.word	0x20000254

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000254 	.word	0x20000254

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff ffee 	bl	8001d08 <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000088 	.word	0x20000088

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4907      	ldr	r1, [pc, #28]	@ (8001e04 <__NVIC_EnableIRQ+0x38>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	@ (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	@ (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff29 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff3e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff31 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f98:	f7ff feb6 	bl	8001d08 <HAL_GetTick>
 8001f9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d008      	beq.n	8001fbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e052      	b.n	8002062 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0216 	bic.w	r2, r2, #22
 8001fca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <HAL_DMA_Abort+0x62>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0208 	bic.w	r2, r2, #8
 8001ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e013      	b.n	8002036 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fe7b 	bl	8001d08 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d90c      	bls.n	8002036 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e015      	b.n	8002062 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e4      	bne.n	800200e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	223f      	movs	r2, #63	@ 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d004      	beq.n	8002088 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e00c      	b.n	80020a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2205      	movs	r2, #5
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	@ 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e159      	b.n	8002380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8148 	bne.w	800237a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d005      	beq.n	8002102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d130      	bne.n	8002164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 0201 	and.w	r2, r3, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b03      	cmp	r3, #3
 800216e:	d017      	beq.n	80021a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d123      	bne.n	80021f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	08da      	lsrs	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69b9      	ldr	r1, [r7, #24]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a2 	beq.w	800237a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b57      	ldr	r3, [pc, #348]	@ (8002398 <HAL_GPIO_Init+0x2e8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a56      	ldr	r2, [pc, #344]	@ (8002398 <HAL_GPIO_Init+0x2e8>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <HAL_GPIO_Init+0x2e8>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002252:	4a52      	ldr	r2, [pc, #328]	@ (800239c <HAL_GPIO_Init+0x2ec>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a49      	ldr	r2, [pc, #292]	@ (80023a0 <HAL_GPIO_Init+0x2f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d019      	beq.n	80022b2 <HAL_GPIO_Init+0x202>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a48      	ldr	r2, [pc, #288]	@ (80023a4 <HAL_GPIO_Init+0x2f4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d013      	beq.n	80022ae <HAL_GPIO_Init+0x1fe>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a47      	ldr	r2, [pc, #284]	@ (80023a8 <HAL_GPIO_Init+0x2f8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_GPIO_Init+0x1fa>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a46      	ldr	r2, [pc, #280]	@ (80023ac <HAL_GPIO_Init+0x2fc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d007      	beq.n	80022a6 <HAL_GPIO_Init+0x1f6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a45      	ldr	r2, [pc, #276]	@ (80023b0 <HAL_GPIO_Init+0x300>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_GPIO_Init+0x1f2>
 800229e:	2304      	movs	r3, #4
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x204>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	@ (800239c <HAL_GPIO_Init+0x2ec>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b38      	ldr	r3, [pc, #224]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a24      	ldr	r2, [pc, #144]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002326:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234a:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002374:	4a0f      	ldr	r2, [pc, #60]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f aea2 	bls.w	80020cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e001      	b.n	80023da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e12b      	b.n	8002686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe f990 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	@ 0x24
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800246e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002480:	f001 f8da 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8002484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a81      	ldr	r2, [pc, #516]	@ (8002690 <HAL_I2C_Init+0x274>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d807      	bhi.n	80024a0 <HAL_I2C_Init+0x84>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a80      	ldr	r2, [pc, #512]	@ (8002694 <HAL_I2C_Init+0x278>)
 8002494:	4293      	cmp	r3, r2
 8002496:	bf94      	ite	ls
 8002498:	2301      	movls	r3, #1
 800249a:	2300      	movhi	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e006      	b.n	80024ae <HAL_I2C_Init+0x92>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002698 <HAL_I2C_Init+0x27c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0e7      	b.n	8002686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a78      	ldr	r2, [pc, #480]	@ (800269c <HAL_I2C_Init+0x280>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002690 <HAL_I2C_Init+0x274>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d802      	bhi.n	80024f0 <HAL_I2C_Init+0xd4>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3301      	adds	r3, #1
 80024ee:	e009      	b.n	8002504 <HAL_I2C_Init+0xe8>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	4a69      	ldr	r2, [pc, #420]	@ (80026a0 <HAL_I2C_Init+0x284>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	3301      	adds	r3, #1
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002516:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	495c      	ldr	r1, [pc, #368]	@ (8002690 <HAL_I2C_Init+0x274>)
 8002520:	428b      	cmp	r3, r1
 8002522:	d819      	bhi.n	8002558 <HAL_I2C_Init+0x13c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e59      	subs	r1, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002532:	1c59      	adds	r1, r3, #1
 8002534:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002538:	400b      	ands	r3, r1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_I2C_Init+0x138>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e59      	subs	r1, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fbb1 f3f3 	udiv	r3, r1, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	e051      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 8002554:	2304      	movs	r3, #4
 8002556:	e04f      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_I2C_Init+0x168>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e012      	b.n	80025aa <HAL_I2C_Init+0x18e>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	0099      	lsls	r1, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x196>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e022      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10e      	bne.n	80025d8 <HAL_I2C_Init+0x1bc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e58      	subs	r0, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d6:	e00f      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	6809      	ldr	r1, [r1, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6911      	ldr	r1, [r2, #16]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	000186a0 	.word	0x000186a0
 8002694:	001e847f 	.word	0x001e847f
 8002698:	003d08ff 	.word	0x003d08ff
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	10624dd3 	.word	0x10624dd3

080026a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
 80026b4:	4613      	mov	r3, r2
 80026b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fb26 	bl	8001d08 <HAL_GetTick>
 80026bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 80e0 	bne.w	800288c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	4970      	ldr	r1, [pc, #448]	@ (8002898 <HAL_I2C_Master_Transmit+0x1f4>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f964 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0d3      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Transmit+0x50>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0cc      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d007      	beq.n	800271a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2221      	movs	r2, #33	@ 0x21
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2210      	movs	r2, #16
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a50      	ldr	r2, [pc, #320]	@ (800289c <HAL_I2C_Master_Transmit+0x1f8>)
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	6a3a      	ldr	r2, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f89c 	bl	80028a0 <I2C_MasterRequestWrite>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e08d      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002788:	e066      	b.n	8002858 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa22 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d107      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d11b      	bne.n	800282c <HAL_I2C_Master_Transmit+0x188>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d017      	beq.n	800282c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	6a39      	ldr	r1, [r7, #32]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fa19 	bl	8002c68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00d      	beq.n	8002858 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	2b04      	cmp	r3, #4
 8002842:	d107      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002852:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e01a      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d194      	bne.n	800278a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	00100002 	.word	0x00100002
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	460b      	mov	r3, r1
 80028ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d006      	beq.n	80028ca <I2C_MasterRequestWrite+0x2a>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d003      	beq.n	80028ca <I2C_MasterRequestWrite+0x2a>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028c8:	d108      	bne.n	80028dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e00b      	b.n	80028f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d107      	bne.n	80028f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f84f 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291a:	d103      	bne.n	8002924 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e035      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002930:	d108      	bne.n	8002944 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e01b      	b.n	800297c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002944:	897b      	ldrh	r3, [r7, #10]
 8002946:	11db      	asrs	r3, r3, #7
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f063 030f 	orn	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	490e      	ldr	r1, [pc, #56]	@ (800299c <I2C_MasterRequestWrite+0xfc>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f898 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e010      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <I2C_MasterRequestWrite+0x100>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f888 	bl	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00010008 	.word	0x00010008
 80029a0:	00010002 	.word	0x00010002

080029a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b4:	e048      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d044      	beq.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7ff f9a3 	bl	8001d08 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d139      	bne.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10d      	bne.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	43da      	mvns	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	e00c      	b.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	43da      	mvns	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4013      	ands	r3, r2
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d116      	bne.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e023      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0c1b      	lsrs	r3, r3, #16
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10d      	bne.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	e00c      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf0c      	ite	eq
 8002a80:	2301      	moveq	r3, #1
 8002a82:	2300      	movne	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d093      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa6:	e071      	b.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab6:	d123      	bne.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e067      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d041      	beq.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7ff f8fe 	bl	8001d08 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d136      	bne.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10c      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e00b      	b.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e021      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10c      	bne.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	43da      	mvns	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	bf14      	ite	ne
 8002ba8:	2301      	movne	r3, #1
 8002baa:	2300      	moveq	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e00b      	b.n	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af6d 	bne.w	8002aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be4:	e034      	b.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f886 	bl	8002cf8 <I2C_IsAcknowledgeFailed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e034      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d028      	beq.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7ff f883 	bl	8001d08 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d11d      	bne.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b80      	cmp	r3, #128	@ 0x80
 8002c20:	d016      	beq.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	2b80      	cmp	r3, #128	@ 0x80
 8002c5c:	d1c3      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c74:	e034      	b.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f83e 	bl	8002cf8 <I2C_IsAcknowledgeFailed>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e034      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d028      	beq.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7ff f83b 	bl	8001d08 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11d      	bne.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d016      	beq.n	8002ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e007      	b.n	8002cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d1c3      	bne.n	8002c76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0e:	d11b      	bne.n	8002d48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e267      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d075      	beq.n	8002e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d76:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d00c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4b85      	ldr	r3, [pc, #532]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d112      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8e:	4b82      	ldr	r3, [pc, #520]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d9a:	d10b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d05b      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d157      	bne.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e242      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x74>
 8002dbe:	4b76      	ldr	r3, [pc, #472]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a75      	ldr	r2, [pc, #468]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e01d      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x98>
 8002dd6:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6f      	ldr	r2, [pc, #444]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6c      	ldr	r2, [pc, #432]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e00b      	b.n	8002e08 <HAL_RCC_OscConfig+0xb0>
 8002df0:	4b69      	ldr	r3, [pc, #420]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a68      	ldr	r2, [pc, #416]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe ff7a 	bl	8001d08 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe ff76 	bl	8001d08 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	@ 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e207      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ff66 	bl	8001d08 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe ff62 	bl	8001d08 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1f3      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d063      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7a:	4b47      	ldr	r3, [pc, #284]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d11c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b44      	ldr	r3, [pc, #272]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	4b41      	ldr	r3, [pc, #260]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e1c7      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4937      	ldr	r1, [pc, #220]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	e03a      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec8:	4b34      	ldr	r3, [pc, #208]	@ (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe ff1b 	bl	8001d08 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe ff17 	bl	8001d08 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e1a8      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4925      	ldr	r1, [pc, #148]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
 8002f08:	e015      	b.n	8002f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_RCC_OscConfig+0x244>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fefa 	bl	8001d08 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fe fef6 	bl	8001d08 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e187      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d036      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe feda 	bl	8001d08 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe fed6 	bl	8001d08 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e167      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x200>
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCC_OscConfig+0x248>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fec3 	bl	8001d08 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	e00e      	b.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f86:	f7fe febf 	bl	8001d08 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d907      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e150      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ea      	bne.n	8002f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8097 	beq.w	80030ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc2:	4b81      	ldr	r3, [pc, #516]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10f      	bne.n	8002fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fde:	4b7a      	ldr	r3, [pc, #488]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b77      	ldr	r3, [pc, #476]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffa:	4b74      	ldr	r3, [pc, #464]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a73      	ldr	r2, [pc, #460]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003006:	f7fe fe7f 	bl	8001d08 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fe7b 	bl	8001d08 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e10c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b6a      	ldr	r3, [pc, #424]	@ (80031cc <HAL_RCC_OscConfig+0x474>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f0      	beq.n	800300e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_RCC_OscConfig+0x2ea>
 8003034:	4b64      	ldr	r3, [pc, #400]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	4a63      	ldr	r2, [pc, #396]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x30c>
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	4a5e      	ldr	r2, [pc, #376]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	6713      	str	r3, [r2, #112]	@ 0x70
 8003056:	4b5c      	ldr	r3, [pc, #368]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	4a5b      	ldr	r2, [pc, #364]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6713      	str	r3, [r2, #112]	@ 0x70
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0x324>
 8003064:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a57      	ldr	r2, [pc, #348]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003070:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	4a54      	ldr	r2, [pc, #336]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 0304 	bic.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe fe40 	bl	8001d08 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fe3c 	bl	8001d08 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0cb      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	4b49      	ldr	r3, [pc, #292]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0ee      	beq.n	800308c <HAL_RCC_OscConfig+0x334>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fe2a 	bl	8001d08 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fe26 	bl	8001d08 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0b5      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	4b3e      	ldr	r3, [pc, #248]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	4a38      	ldr	r2, [pc, #224]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a1 	beq.w	8003238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030f6:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d05c      	beq.n	80031bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d141      	bne.n	800318e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fdfa 	bl	8001d08 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fdf6 	bl	8001d08 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e087      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	491b      	ldr	r1, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fe fdcf 	bl	8001d08 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe fdcb 	bl	8001d08 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e05c      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x416>
 800318c:	e054      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <HAL_RCC_OscConfig+0x478>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fdb8 	bl	8001d08 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe fdb4 	bl	8001d08 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e045      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_OscConfig+0x470>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x444>
 80031ba:	e03d      	b.n	8003238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d107      	bne.n	80031d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e038      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
 80031d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d028      	beq.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800320a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cc      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d90c      	bls.n	8003284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b65      	ldr	r3, [pc, #404]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b63      	ldr	r3, [pc, #396]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b8      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800329c:	4b59      	ldr	r3, [pc, #356]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	4a58      	ldr	r2, [pc, #352]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c0:	4b50      	ldr	r3, [pc, #320]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	494d      	ldr	r1, [pc, #308]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d044      	beq.n	8003368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e07f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	2b03      	cmp	r3, #3
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e06f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e067      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b37      	ldr	r3, [pc, #220]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4934      	ldr	r1, [pc, #208]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fce6 	bl	8001d08 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fce2 	bl	8001d08 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e04f      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2b      	ldr	r3, [pc, #172]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d20c      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e032      	b.n	80033f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800339c:	4b19      	ldr	r3, [pc, #100]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4916      	ldr	r1, [pc, #88]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ba:	4b12      	ldr	r3, [pc, #72]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	490e      	ldr	r1, [pc, #56]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ce:	f000 f821 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	490a      	ldr	r1, [pc, #40]	@ (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	5ccb      	ldrb	r3, [r1, r3]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033ea:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fc46 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023c00 	.word	0x40023c00
 8003404:	40023800 	.word	0x40023800
 8003408:	08005aa8 	.word	0x08005aa8
 800340c:	20000000 	.word	0x20000000
 8003410:	20000084 	.word	0x20000084

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003418:	b094      	sub	sp, #80	@ 0x50
 800341a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800342c:	4b79      	ldr	r3, [pc, #484]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d00d      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x40>
 8003438:	2b08      	cmp	r3, #8
 800343a:	f200 80e1 	bhi.w	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x3a>
 8003446:	e0db      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 800344a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344c:	e0db      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344e:	4b73      	ldr	r3, [pc, #460]	@ (800361c <HAL_RCC_GetSysClockFreq+0x208>)
 8003450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003452:	e0d8      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003454:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800345e:	4b6d      	ldr	r3, [pc, #436]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	2200      	movs	r2, #0
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003474:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
 8003482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	f04f 0000 	mov.w	r0, #0
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	0159      	lsls	r1, r3, #5
 8003494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003498:	0150      	lsls	r0, r2, #5
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4621      	mov	r1, r4
 80034a0:	1a51      	subs	r1, r2, r1
 80034a2:	6139      	str	r1, [r7, #16]
 80034a4:	4629      	mov	r1, r5
 80034a6:	eb63 0301 	sbc.w	r3, r3, r1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b8:	4659      	mov	r1, fp
 80034ba:	018b      	lsls	r3, r1, #6
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c2:	4651      	mov	r1, sl
 80034c4:	018a      	lsls	r2, r1, #6
 80034c6:	4651      	mov	r1, sl
 80034c8:	ebb2 0801 	subs.w	r8, r2, r1
 80034cc:	4659      	mov	r1, fp
 80034ce:	eb63 0901 	sbc.w	r9, r3, r1
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e6:	4690      	mov	r8, r2
 80034e8:	4699      	mov	r9, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	eb18 0303 	adds.w	r3, r8, r3
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	462b      	mov	r3, r5
 80034f4:	eb49 0303 	adc.w	r3, r9, r3
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003506:	4629      	mov	r1, r5
 8003508:	024b      	lsls	r3, r1, #9
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003510:	4621      	mov	r1, r4
 8003512:	024a      	lsls	r2, r1, #9
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003524:	f7fc feb4 	bl	8000290 <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003530:	e058      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	4618      	mov	r0, r3
 800353c:	4611      	mov	r1, r2
 800353e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800354c:	4642      	mov	r2, r8
 800354e:	464b      	mov	r3, r9
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	0159      	lsls	r1, r3, #5
 800355a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355e:	0150      	lsls	r0, r2, #5
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4641      	mov	r1, r8
 8003566:	ebb2 0a01 	subs.w	sl, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800357c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003584:	ebb2 040a 	subs.w	r4, r2, sl
 8003588:	eb63 050b 	sbc.w	r5, r3, fp
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	464b      	mov	r3, r9
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ba:	4629      	mov	r1, r5
 80035bc:	028b      	lsls	r3, r1, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c4:	4621      	mov	r1, r4
 80035c6:	028a      	lsls	r2, r1, #10
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	2200      	movs	r2, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	61fa      	str	r2, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	f7fc fe5a 	bl	8000290 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4613      	mov	r3, r2
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	3301      	adds	r3, #1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x204>)
 8003602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003608:	4618      	mov	r0, r3
 800360a:	3750      	adds	r7, #80	@ 0x50
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff0 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0a9b      	lsrs	r3, r3, #10
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08005ab8 	.word	0x08005ab8

08003660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003664:	f7ff ffdc 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003668:	4602      	mov	r2, r0
 800366a:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	4903      	ldr	r1, [pc, #12]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003676:	5ccb      	ldrb	r3, [r1, r3]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800367c:	4618      	mov	r0, r3
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40023800 	.word	0x40023800
 8003684:	08005ab8 	.word	0x08005ab8

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fa24 	bl	8000afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fa70 	bl	8003bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e044      	b.n	80037ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1e      	ldr	r2, [pc, #120]	@ (80037d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x6c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d013      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x6c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1a      	ldr	r2, [pc, #104]	@ (80037dc <HAL_TIM_Base_Start_IT+0xb4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x6c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a19      	ldr	r2, [pc, #100]	@ (80037e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x6c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	@ (80037e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x6c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	@ (80037e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d010      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	e007      	b.n	80037c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40014000 	.word	0x40014000

080037ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d020      	beq.n	8003850 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0202 	mvn.w	r2, #2
 8003820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f999 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f98b 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f99c 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d020      	beq.n	800389c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0204 	mvn.w	r2, #4
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f973 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f965 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f976 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d020      	beq.n	80038e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01b      	beq.n	80038e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0208 	mvn.w	r2, #8
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f94d 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f93f 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f950 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d020      	beq.n	8003934 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f927 	bl	8003b6e <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f919 	bl	8003b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f92a 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fca6 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fab0 	bl	8003edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8fb 	bl	8003b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0220 	mvn.w	r2, #32
 80039bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa82 	bl	8003ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_ConfigClockSource+0x1c>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e0b4      	b.n	8003b52 <HAL_TIM_ConfigClockSource+0x186>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a20:	d03e      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	f200 8087 	bhi.w	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2e:	f000 8086 	beq.w	8003b3e <HAL_TIM_ConfigClockSource+0x172>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	d87f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b70      	cmp	r3, #112	@ 0x70
 8003a3a:	d01a      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0xa6>
 8003a3c:	2b70      	cmp	r3, #112	@ 0x70
 8003a3e:	d87b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b60      	cmp	r3, #96	@ 0x60
 8003a42:	d050      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8003a44:	2b60      	cmp	r3, #96	@ 0x60
 8003a46:	d877      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b50      	cmp	r3, #80	@ 0x50
 8003a4a:	d03c      	beq.n	8003ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8003a4c:	2b50      	cmp	r3, #80	@ 0x50
 8003a4e:	d873      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d058      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0x13a>
 8003a54:	2b40      	cmp	r3, #64	@ 0x40
 8003a56:	d86f      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b30      	cmp	r3, #48	@ 0x30
 8003a5a:	d064      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	2b30      	cmp	r3, #48	@ 0x30
 8003a5e:	d86b      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d060      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d867      	bhi.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d05c      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d05a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	e062      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a82:	f000 f993 	bl	8003dac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	609a      	str	r2, [r3, #8]
      break;
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab0:	f000 f97c 	bl	8003dac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac2:	609a      	str	r2, [r3, #8]
      break;
 8003ac4:	e03c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f000 f8f0 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2150      	movs	r1, #80	@ 0x50
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f949 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003ae4:	e02c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af2:	461a      	mov	r2, r3
 8003af4:	f000 f90f 	bl	8003d16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2160      	movs	r1, #96	@ 0x60
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f939 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003b04:	e01c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 f8d0 	bl	8003cb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	@ 0x40
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f929 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e00c      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 f920 	bl	8003d76 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e003      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e000      	b.n	8003b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <TIM_Base_SetConfig+0xf0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00f      	beq.n	8003be4 <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bca:	d00b      	beq.n	8003be4 <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <TIM_Base_SetConfig+0xf4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a33      	ldr	r2, [pc, #204]	@ (8003ca4 <TIM_Base_SetConfig+0xf8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0x38>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a32      	ldr	r2, [pc, #200]	@ (8003ca8 <TIM_Base_SetConfig+0xfc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d108      	bne.n	8003bf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <TIM_Base_SetConfig+0xf0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01b      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d017      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <TIM_Base_SetConfig+0xf4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <TIM_Base_SetConfig+0xf8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00f      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <TIM_Base_SetConfig+0xfc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <TIM_Base_SetConfig+0x100>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d007      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <TIM_Base_SetConfig+0x104>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d003      	beq.n	8003c36 <TIM_Base_SetConfig+0x8a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a20      	ldr	r2, [pc, #128]	@ (8003cb4 <TIM_Base_SetConfig+0x108>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a0c      	ldr	r2, [pc, #48]	@ (8003c9c <TIM_Base_SetConfig+0xf0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d103      	bne.n	8003c76 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f043 0204 	orr.w	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 030a 	bic.w	r3, r3, #10
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 0210 	bic.w	r2, r3, #16
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f043 0307 	orr.w	r3, r3, #7
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e050      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e50:	d013      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e042      	b.n	8003f88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc fe40 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fdd3 	bl	8004ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d175      	bne.n	800409c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Transmit+0x2c>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e06e      	b.n	800409e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2221      	movs	r2, #33	@ 0x21
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fce:	f7fd fe9b 	bl	8001d08 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	88fa      	ldrh	r2, [r7, #6]
 8003fde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe8:	d108      	bne.n	8003ffc <HAL_UART_Transmit+0x6c>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e003      	b.n	8004004 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004004:	e02e      	b.n	8004064 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	@ 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fb37 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e03a      	b.n	800409e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	3302      	adds	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e007      	b.n	8004056 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1cb      	bne.n	8004006 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2200      	movs	r2, #0
 8004076:	2140      	movs	r1, #64	@ 0x40
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fb03 	bl	8004684 <UART_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e006      	b.n	800409e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d112      	bne.n	80040e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Receive_IT+0x26>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e00b      	b.n	80040e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	461a      	mov	r2, r3
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb2a 	bl	8004736 <UART_Start_Receive_IT>
 80040e2:	4603      	mov	r3, r0
 80040e4:	e000      	b.n	80040e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b0ba      	sub	sp, #232	@ 0xe8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800412e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_UART_IRQHandler+0x66>
 8004142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fc07 	bl	8004962 <UART_Receive_IT>
      return;
 8004154:	e273      	b.n	800463e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80de 	beq.w	800431c <HAL_UART_IRQHandler+0x22c>
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800416c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004170:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80d1 	beq.w	800431c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_UART_IRQHandler+0xae>
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f043 0201 	orr.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_UART_IRQHandler+0xd2>
 80041aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ba:	f043 0202 	orr.w	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_UART_IRQHandler+0xf6>
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <HAL_UART_IRQHandler+0x126>
 80041f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d105      	bne.n	800420a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f043 0208 	orr.w	r2, r3, #8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 820a 	beq.w	8004634 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_UART_IRQHandler+0x14e>
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fb92 	bl	8004962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <HAL_UART_IRQHandler+0x17a>
 8004262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d04f      	beq.n	800430a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa9d 	bl	80047aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d141      	bne.n	8004302 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1d9      	bne.n	800427e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d013      	beq.n	80042fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	4a8a      	ldr	r2, [pc, #552]	@ (8004500 <HAL_UART_IRQHandler+0x410>)
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fd fec3 	bl	800206a <HAL_DMA_Abort_IT>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e00e      	b.n	8004318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9ac 	bl	8004658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e00a      	b.n	8004318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9a8 	bl	8004658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e006      	b.n	8004318 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f9a4 	bl	8004658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004316:	e18d      	b.n	8004634 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	bf00      	nop
    return;
 800431a:	e18b      	b.n	8004634 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	2b01      	cmp	r3, #1
 8004322:	f040 8167 	bne.w	80045f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8160 	beq.w	80045f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8159 	beq.w	80045f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004362:	2b40      	cmp	r3, #64	@ 0x40
 8004364:	f040 80ce 	bne.w	8004504 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004374:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a9 	beq.w	80044d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004386:	429a      	cmp	r2, r3
 8004388:	f080 80a2 	bcs.w	80044d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004392:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800439e:	f000 8088 	beq.w	80044b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1d9      	bne.n	80043a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3314      	adds	r3, #20
 80043f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004412:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004416:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800441a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e1      	bne.n	80043ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800443a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800443c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800444e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004454:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800445c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004482:	f023 0310 	bic.w	r3, r3, #16
 8004486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	330c      	adds	r3, #12
 8004490:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004494:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004496:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800449a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e3      	bne.n	8004470 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fd6c 	bl	8001f8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8cf 	bl	800466c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80044ce:	e0b3      	b.n	8004638 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 80ad 	bne.w	8004638 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e8:	f040 80a6 	bne.w	8004638 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8b7 	bl	800466c <HAL_UARTEx_RxEventCallback>
      return;
 80044fe:	e09b      	b.n	8004638 <HAL_UART_IRQHandler+0x548>
 8004500:	08004871 	.word	0x08004871
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 808e 	beq.w	800463c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8089 	beq.w	800463c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004540:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800454e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004550:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800455c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e3      	bne.n	800452a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	623b      	str	r3, [r7, #32]
   return(result);
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004586:	633a      	str	r2, [r7, #48]	@ 0x30
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800458c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e3      	bne.n	8004562 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045cc:	61fa      	str	r2, [r7, #28]
 80045ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	617b      	str	r3, [r7, #20]
   return(result);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e3      	bne.n	80045a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045ea:	4619      	mov	r1, r3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f83d 	bl	800466c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045f2:	e023      	b.n	800463c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_UART_IRQHandler+0x524>
 8004600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f940 	bl	8004892 <UART_Transmit_IT>
    return;
 8004612:	e014      	b.n	800463e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <HAL_UART_IRQHandler+0x54e>
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f980 	bl	8004932 <UART_EndTransmit_IT>
    return;
 8004632:	e004      	b.n	800463e <HAL_UART_IRQHandler+0x54e>
    return;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_UART_IRQHandler+0x54e>
      return;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_UART_IRQHandler+0x54e>
      return;
 800463c:	bf00      	nop
  }
}
 800463e:	37e8      	adds	r7, #232	@ 0xe8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004694:	e03b      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d037      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fd fb33 	bl	8001d08 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e03a      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d023      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b80      	cmp	r3, #128	@ 0x80
 80046ca:	d020      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b40      	cmp	r3, #64	@ 0x40
 80046d0:	d01d      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d116      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f857 	bl	80047aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2208      	movs	r2, #8
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00f      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	429a      	cmp	r2, r3
 800472a:	d0b4      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	4613      	mov	r3, r2
 8004742:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	@ 0x22
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800477a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0220 	orr.w	r2, r2, #32
 800479a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b095      	sub	sp, #84	@ 0x54
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80047d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e5      	bne.n	80047b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800480c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	2b01      	cmp	r3, #1
 8004820:	d119      	bne.n	8004856 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	60bb      	str	r3, [r7, #8]
   return(result);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0310 	bic.w	r3, r3, #16
 8004838:	647b      	str	r3, [r7, #68]	@ 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004842:	61ba      	str	r2, [r7, #24]
 8004844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	613b      	str	r3, [r7, #16]
   return(result);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004864:	bf00      	nop
 8004866:	3754      	adds	r7, #84	@ 0x54
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fee7 	bl	8004658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b21      	cmp	r3, #33	@ 0x21
 80048a4:	d13e      	bne.n	8004924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ae:	d114      	bne.n	80048da <UART_Transmit_IT+0x48>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d110      	bne.n	80048da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	621a      	str	r2, [r3, #32]
 80048d8:	e008      	b.n	80048ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6211      	str	r1, [r2, #32]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4619      	mov	r1, r3
 80048fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800490e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800491e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fe76 	bl	8004644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08c      	sub	sp, #48	@ 0x30
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b22      	cmp	r3, #34	@ 0x22
 800497c:	f040 80aa 	bne.w	8004ad4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004988:	d115      	bne.n	80049b6 <UART_Receive_IT+0x54>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d111      	bne.n	80049b6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	1c9a      	adds	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049b4:	e024      	b.n	8004a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c4:	d007      	beq.n	80049d6 <UART_Receive_IT+0x74>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <UART_Receive_IT+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e008      	b.n	80049f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d15d      	bne.n	8004ad0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0220 	bic.w	r2, r2, #32
 8004a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d135      	bne.n	8004ac6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 0310 	bic.w	r3, r3, #16
 8004a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a80:	623a      	str	r2, [r7, #32]
 8004a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69f9      	ldr	r1, [r7, #28]
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d10a      	bne.n	8004ab8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fdd4 	bl	800466c <HAL_UARTEx_RxEventCallback>
 8004ac4:	e002      	b.n	8004acc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fc00 	bl	80012cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e002      	b.n	8004ad6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3730      	adds	r7, #48	@ 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae4:	b0c0      	sub	sp, #256	@ 0x100
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	ea40 0301 	orr.w	r3, r0, r1
 8004b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b38:	f021 010c 	bic.w	r1, r1, #12
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b46:	430b      	orrs	r3, r1
 8004b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5a:	6999      	ldr	r1, [r3, #24]
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	ea40 0301 	orr.w	r3, r0, r1
 8004b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8004dac <UART_SetConfig+0x2cc>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <UART_SetConfig+0xa0>
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8004db0 <UART_SetConfig+0x2d0>)
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d104      	bne.n	8004b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fd6e 	bl	8003660 <HAL_RCC_GetPCLK2Freq>
 8004b84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b88:	e003      	b.n	8004b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7fe fd55 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b9c:	f040 810c 	bne.w	8004db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004baa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	462b      	mov	r3, r5
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	eb12 0801 	adds.w	r8, r2, r1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	eb43 0901 	adc.w	r9, r3, r1
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004be2:	4690      	mov	r8, r2
 8004be4:	4699      	mov	r9, r3
 8004be6:	4623      	mov	r3, r4
 8004be8:	eb18 0303 	adds.w	r3, r8, r3
 8004bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	eb49 0303 	adc.w	r3, r9, r3
 8004bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c0e:	460b      	mov	r3, r1
 8004c10:	18db      	adds	r3, r3, r3
 8004c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c14:	4613      	mov	r3, r2
 8004c16:	eb42 0303 	adc.w	r3, r2, r3
 8004c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c24:	f7fb fb34 	bl	8000290 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b61      	ldr	r3, [pc, #388]	@ (8004db4 <UART_SetConfig+0x2d4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c50:	415b      	adcs	r3, r3
 8004c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c58:	4641      	mov	r1, r8
 8004c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5e:	4649      	mov	r1, r9
 8004c60:	eb43 0b01 	adc.w	fp, r3, r1
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	4692      	mov	sl, r2
 8004c7a:	469b      	mov	fp, r3
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c86:	464b      	mov	r3, r9
 8004c88:	eb4b 0303 	adc.w	r3, fp, r3
 8004c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cba:	f7fb fae9 	bl	8000290 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <UART_SetConfig+0x2d4>)
 8004cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2264      	movs	r2, #100	@ 0x64
 8004cce:	fb02 f303 	mul.w	r3, r2, r3
 8004cd2:	1acb      	subs	r3, r1, r3
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cda:	4b36      	ldr	r3, [pc, #216]	@ (8004db4 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ce8:	441c      	add	r4, r3
 8004cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cfc:	4642      	mov	r2, r8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	1891      	adds	r1, r2, r2
 8004d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d04:	415b      	adcs	r3, r3
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	1851      	adds	r1, r2, r1
 8004d10:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d12:	4649      	mov	r1, r9
 8004d14:	414b      	adcs	r3, r1
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d24:	4659      	mov	r1, fp
 8004d26:	00cb      	lsls	r3, r1, #3
 8004d28:	4651      	mov	r1, sl
 8004d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2e:	4651      	mov	r1, sl
 8004d30:	00ca      	lsls	r2, r1, #3
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d40:	464b      	mov	r3, r9
 8004d42:	460a      	mov	r2, r1
 8004d44:	eb42 0303 	adc.w	r3, r2, r3
 8004d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d60:	460b      	mov	r3, r1
 8004d62:	18db      	adds	r3, r3, r3
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d66:	4613      	mov	r3, r2
 8004d68:	eb42 0303 	adc.w	r3, r2, r3
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d76:	f7fb fa8b 	bl	8000290 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <UART_SetConfig+0x2d4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	@ 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	3332      	adds	r3, #50	@ 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <UART_SetConfig+0x2d4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 0207 	and.w	r2, r3, #7
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da8:	e106      	b.n	8004fb8 <UART_SetConfig+0x4d8>
 8004daa:	bf00      	nop
 8004dac:	40011000 	.word	0x40011000
 8004db0:	40011400 	.word	0x40011400
 8004db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	6239      	str	r1, [r7, #32]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	eb43 0501 	adc.w	r5, r3, r1
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e00:	464b      	mov	r3, r9
 8004e02:	eb45 0303 	adc.w	r3, r5, r3
 8004e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e26:	4629      	mov	r1, r5
 8004e28:	008b      	lsls	r3, r1, #2
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e30:	4621      	mov	r1, r4
 8004e32:	008a      	lsls	r2, r1, #2
 8004e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e38:	f7fb fa2a 	bl	8000290 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4b60      	ldr	r3, [pc, #384]	@ (8004fc4 <UART_SetConfig+0x4e4>)
 8004e42:	fba3 2302 	umull	r2, r3, r3, r2
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	011c      	lsls	r4, r3, #4
 8004e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	1891      	adds	r1, r2, r2
 8004e62:	61b9      	str	r1, [r7, #24]
 8004e64:	415b      	adcs	r3, r3
 8004e66:	61fb      	str	r3, [r7, #28]
 8004e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	1851      	adds	r1, r2, r1
 8004e70:	6139      	str	r1, [r7, #16]
 8004e72:	4649      	mov	r1, r9
 8004e74:	414b      	adcs	r3, r1
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e84:	4659      	mov	r1, fp
 8004e86:	00cb      	lsls	r3, r1, #3
 8004e88:	4651      	mov	r1, sl
 8004e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8e:	4651      	mov	r1, sl
 8004e90:	00ca      	lsls	r2, r1, #3
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	4642      	mov	r2, r8
 8004e9a:	189b      	adds	r3, r3, r2
 8004e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	eb42 0303 	adc.w	r3, r2, r3
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	008b      	lsls	r3, r1, #2
 8004ec8:	4641      	mov	r1, r8
 8004eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ece:	4641      	mov	r1, r8
 8004ed0:	008a      	lsls	r2, r1, #2
 8004ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ed6:	f7fb f9db 	bl	8000290 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4b38      	ldr	r3, [pc, #224]	@ (8004fc4 <UART_SetConfig+0x4e4>)
 8004ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2264      	movs	r2, #100	@ 0x64
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	1acb      	subs	r3, r1, r3
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	3332      	adds	r3, #50	@ 0x32
 8004ef4:	4a33      	ldr	r2, [pc, #204]	@ (8004fc4 <UART_SetConfig+0x4e4>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f00:	441c      	add	r4, r3
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f20:	4641      	mov	r1, r8
 8004f22:	1851      	adds	r1, r2, r1
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	4649      	mov	r1, r9
 8004f28:	414b      	adcs	r3, r1
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f38:	4659      	mov	r1, fp
 8004f3a:	00cb      	lsls	r3, r1, #3
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f42:	4651      	mov	r1, sl
 8004f44:	00ca      	lsls	r2, r1, #3
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f52:	464b      	mov	r3, r9
 8004f54:	460a      	mov	r2, r1
 8004f56:	eb42 0303 	adc.w	r3, r2, r3
 8004f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f66:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f74:	4649      	mov	r1, r9
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	4641      	mov	r1, r8
 8004f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7e:	4641      	mov	r1, r8
 8004f80:	008a      	lsls	r2, r1, #2
 8004f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f86:	f7fb f983 	bl	8000290 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <UART_SetConfig+0x4e4>)
 8004f90:	fba3 1302 	umull	r1, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2164      	movs	r1, #100	@ 0x64
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	3332      	adds	r3, #50	@ 0x32
 8004fa2:	4a08      	ldr	r2, [pc, #32]	@ (8004fc4 <UART_SetConfig+0x4e4>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f003 020f 	and.w	r2, r3, #15
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4422      	add	r2, r4
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc4:	51eb851f 	.word	0x51eb851f

08004fc8 <queInit>:
 */
#include "circled_que.h"

#define QUE_IS_FULL 1

void queInit(CircleQue_tpye* que){
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	que->top = 0;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	que->tail = 0;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <isQueFull>:

int isQueFull(CircleQue_tpye* que) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	return que->top == (que->tail + 1) % QUE_SIZE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4259      	negs	r1, r3
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	f001 0103 	and.w	r1, r1, #3
 8005004:	bf58      	it	pl
 8005006:	424b      	negpl	r3, r1
 8005008:	429a      	cmp	r2, r3
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <isQueEmpty>:

int isQueEmpty(CircleQue_tpye* que) {
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
	return que->top == que->tail;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <enQue>:

int enQue(CircleQue_tpye* que, void* data) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	if(isQueFull(que)) return QUE_IS_FULL;
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ffca 	bl	8004fe8 <isQueFull>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <enQue+0x1a>
 800505a:	2301      	movs	r3, #1
 800505c:	e013      	b.n	8005086 <enQue+0x42>
	que->queData[que->tail] = data;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3202      	adds	r2, #2
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	que->tail = (que->tail + 1) % QUE_SIZE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	3301      	adds	r3, #1
 8005072:	425a      	negs	r2, r3
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	f002 0203 	and.w	r2, r2, #3
 800507c:	bf58      	it	pl
 800507e:	4253      	negpl	r3, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6053      	str	r3, [r2, #4]
	return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <deQue>:

void* deQue(CircleQue_tpye* que) {
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
	if(isQueEmpty(que)) return 0;
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff ffc1 	bl	800501e <isQueEmpty>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <deQue+0x18>
 80050a2:	2300      	movs	r3, #0
 80050a4:	e013      	b.n	80050ce <deQue+0x40>
	void* data = que->queData[que->top];
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3202      	adds	r2, #2
 80050ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b2:	60fb      	str	r3, [r7, #12]
	que->top = (que->top + 1) % QUE_SIZE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	425a      	negs	r2, r3
 80050bc:	f003 0303 	and.w	r3, r3, #3
 80050c0:	f002 0203 	and.w	r2, r2, #3
 80050c4:	bf58      	it	pl
 80050c6:	4253      	negpl	r3, r2
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6013      	str	r3, [r2, #0]
	return data;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <siprintf>:
 80050d8:	b40e      	push	{r1, r2, r3}
 80050da:	b510      	push	{r4, lr}
 80050dc:	b09d      	sub	sp, #116	@ 0x74
 80050de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050e0:	9002      	str	r0, [sp, #8]
 80050e2:	9006      	str	r0, [sp, #24]
 80050e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050e8:	480a      	ldr	r0, [pc, #40]	@ (8005114 <siprintf+0x3c>)
 80050ea:	9107      	str	r1, [sp, #28]
 80050ec:	9104      	str	r1, [sp, #16]
 80050ee:	490a      	ldr	r1, [pc, #40]	@ (8005118 <siprintf+0x40>)
 80050f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f4:	9105      	str	r1, [sp, #20]
 80050f6:	2400      	movs	r4, #0
 80050f8:	a902      	add	r1, sp, #8
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005100:	f000 f994 	bl	800542c <_svfiprintf_r>
 8005104:	9b02      	ldr	r3, [sp, #8]
 8005106:	701c      	strb	r4, [r3, #0]
 8005108:	b01d      	add	sp, #116	@ 0x74
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510e:	b003      	add	sp, #12
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000008c 	.word	0x2000008c
 8005118:	ffff0208 	.word	0xffff0208

0800511c <memset>:
 800511c:	4402      	add	r2, r0
 800511e:	4603      	mov	r3, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	f803 1b01 	strb.w	r1, [r3], #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	@ (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000008c 	.word	0x2000008c

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	@ (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	@ (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	@ (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	@ (800517c <__libc_init_array+0x44>)
 800514c:	f000 fc64 	bl	8005a18 <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08005afc 	.word	0x08005afc
 8005174:	08005afc 	.word	0x08005afc
 8005178:	08005afc 	.word	0x08005afc
 800517c:	08005b00 	.word	0x08005b00

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <_free_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4605      	mov	r5, r0
 8005188:	2900      	cmp	r1, #0
 800518a:	d041      	beq.n	8005210 <_free_r+0x8c>
 800518c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005190:	1f0c      	subs	r4, r1, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	bfb8      	it	lt
 8005196:	18e4      	addlt	r4, r4, r3
 8005198:	f000 f8e0 	bl	800535c <__malloc_lock>
 800519c:	4a1d      	ldr	r2, [pc, #116]	@ (8005214 <_free_r+0x90>)
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	b933      	cbnz	r3, 80051b0 <_free_r+0x2c>
 80051a2:	6063      	str	r3, [r4, #4]
 80051a4:	6014      	str	r4, [r2, #0]
 80051a6:	4628      	mov	r0, r5
 80051a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ac:	f000 b8dc 	b.w	8005368 <__malloc_unlock>
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	d908      	bls.n	80051c6 <_free_r+0x42>
 80051b4:	6820      	ldr	r0, [r4, #0]
 80051b6:	1821      	adds	r1, r4, r0
 80051b8:	428b      	cmp	r3, r1
 80051ba:	bf01      	itttt	eq
 80051bc:	6819      	ldreq	r1, [r3, #0]
 80051be:	685b      	ldreq	r3, [r3, #4]
 80051c0:	1809      	addeq	r1, r1, r0
 80051c2:	6021      	streq	r1, [r4, #0]
 80051c4:	e7ed      	b.n	80051a2 <_free_r+0x1e>
 80051c6:	461a      	mov	r2, r3
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b10b      	cbz	r3, 80051d0 <_free_r+0x4c>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d9fa      	bls.n	80051c6 <_free_r+0x42>
 80051d0:	6811      	ldr	r1, [r2, #0]
 80051d2:	1850      	adds	r0, r2, r1
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d10b      	bne.n	80051f0 <_free_r+0x6c>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	4401      	add	r1, r0
 80051dc:	1850      	adds	r0, r2, r1
 80051de:	4283      	cmp	r3, r0
 80051e0:	6011      	str	r1, [r2, #0]
 80051e2:	d1e0      	bne.n	80051a6 <_free_r+0x22>
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	4408      	add	r0, r1
 80051ec:	6010      	str	r0, [r2, #0]
 80051ee:	e7da      	b.n	80051a6 <_free_r+0x22>
 80051f0:	d902      	bls.n	80051f8 <_free_r+0x74>
 80051f2:	230c      	movs	r3, #12
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	e7d6      	b.n	80051a6 <_free_r+0x22>
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	1821      	adds	r1, r4, r0
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf04      	itt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	6063      	str	r3, [r4, #4]
 8005206:	bf04      	itt	eq
 8005208:	1809      	addeq	r1, r1, r0
 800520a:	6021      	streq	r1, [r4, #0]
 800520c:	6054      	str	r4, [r2, #4]
 800520e:	e7ca      	b.n	80051a6 <_free_r+0x22>
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	2000039c 	.word	0x2000039c

08005218 <sbrk_aligned>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0f      	ldr	r6, [pc, #60]	@ (8005258 <sbrk_aligned+0x40>)
 800521c:	460c      	mov	r4, r1
 800521e:	6831      	ldr	r1, [r6, #0]
 8005220:	4605      	mov	r5, r0
 8005222:	b911      	cbnz	r1, 800522a <sbrk_aligned+0x12>
 8005224:	f000 fba4 	bl	8005970 <_sbrk_r>
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fb9f 	bl	8005970 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d103      	bne.n	800523e <sbrk_aligned+0x26>
 8005236:	f04f 34ff 	mov.w	r4, #4294967295
 800523a:	4620      	mov	r0, r4
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0f8      	beq.n	800523a <sbrk_aligned+0x22>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 fb90 	bl	8005970 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1f2      	bne.n	800523a <sbrk_aligned+0x22>
 8005254:	e7ef      	b.n	8005236 <sbrk_aligned+0x1e>
 8005256:	bf00      	nop
 8005258:	20000398 	.word	0x20000398

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4606      	mov	r6, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d904      	bls.n	8005282 <_malloc_r+0x26>
 8005278:	230c      	movs	r3, #12
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	2000      	movs	r0, #0
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005358 <_malloc_r+0xfc>
 8005286:	f000 f869 	bl	800535c <__malloc_lock>
 800528a:	f8d8 3000 	ldr.w	r3, [r8]
 800528e:	461c      	mov	r4, r3
 8005290:	bb44      	cbnz	r4, 80052e4 <_malloc_r+0x88>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbf 	bl	8005218 <sbrk_aligned>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	4604      	mov	r4, r0
 800529e:	d158      	bne.n	8005352 <_malloc_r+0xf6>
 80052a0:	f8d8 4000 	ldr.w	r4, [r8]
 80052a4:	4627      	mov	r7, r4
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d143      	bne.n	8005332 <_malloc_r+0xd6>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04b      	beq.n	8005346 <_malloc_r+0xea>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	eb04 0903 	add.w	r9, r4, r3
 80052b8:	f000 fb5a 	bl	8005970 <_sbrk_r>
 80052bc:	4581      	cmp	r9, r0
 80052be:	d142      	bne.n	8005346 <_malloc_r+0xea>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	1a6d      	subs	r5, r5, r1
 80052c4:	4629      	mov	r1, r5
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ffa6 	bl	8005218 <sbrk_aligned>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d03a      	beq.n	8005346 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	442b      	add	r3, r5
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	bb62      	cbnz	r2, 8005338 <_malloc_r+0xdc>
 80052de:	f8c8 7000 	str.w	r7, [r8]
 80052e2:	e00f      	b.n	8005304 <_malloc_r+0xa8>
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1b52      	subs	r2, r2, r5
 80052e8:	d420      	bmi.n	800532c <_malloc_r+0xd0>
 80052ea:	2a0b      	cmp	r2, #11
 80052ec:	d917      	bls.n	800531e <_malloc_r+0xc2>
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	6025      	str	r5, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	6059      	strne	r1, [r3, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	bf08      	it	eq
 80052fc:	f8c8 1000 	streq.w	r1, [r8]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f82f 	bl	8005368 <__malloc_unlock>
 800530a:	f104 000b 	add.w	r0, r4, #11
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	f020 0007 	bic.w	r0, r0, #7
 8005314:	1ac2      	subs	r2, r0, r3
 8005316:	bf1c      	itt	ne
 8005318:	1a1b      	subne	r3, r3, r0
 800531a:	50a3      	strne	r3, [r4, r2]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	f8c8 2000 	streq.w	r2, [r8]
 8005328:	605a      	strne	r2, [r3, #4]
 800532a:	e7eb      	b.n	8005304 <_malloc_r+0xa8>
 800532c:	4623      	mov	r3, r4
 800532e:	6864      	ldr	r4, [r4, #4]
 8005330:	e7ae      	b.n	8005290 <_malloc_r+0x34>
 8005332:	463c      	mov	r4, r7
 8005334:	687f      	ldr	r7, [r7, #4]
 8005336:	e7b6      	b.n	80052a6 <_malloc_r+0x4a>
 8005338:	461a      	mov	r2, r3
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d1fb      	bne.n	8005338 <_malloc_r+0xdc>
 8005340:	2300      	movs	r3, #0
 8005342:	6053      	str	r3, [r2, #4]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa8>
 8005346:	230c      	movs	r3, #12
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	4630      	mov	r0, r6
 800534c:	f000 f80c 	bl	8005368 <__malloc_unlock>
 8005350:	e794      	b.n	800527c <_malloc_r+0x20>
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	e7d6      	b.n	8005304 <_malloc_r+0xa8>
 8005356:	bf00      	nop
 8005358:	2000039c 	.word	0x2000039c

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__malloc_lock+0x8>)
 800535e:	f7ff bf0f 	b.w	8005180 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	20000394 	.word	0x20000394

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__malloc_unlock+0x8>)
 800536a:	f7ff bf0a 	b.w	8005182 <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	20000394 	.word	0x20000394

08005374 <__ssputs_r>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	688e      	ldr	r6, [r1, #8]
 800537a:	461f      	mov	r7, r3
 800537c:	42be      	cmp	r6, r7
 800537e:	680b      	ldr	r3, [r1, #0]
 8005380:	4682      	mov	sl, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4690      	mov	r8, r2
 8005386:	d82d      	bhi.n	80053e4 <__ssputs_r+0x70>
 8005388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800538c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005390:	d026      	beq.n	80053e0 <__ssputs_r+0x6c>
 8005392:	6965      	ldr	r5, [r4, #20]
 8005394:	6909      	ldr	r1, [r1, #16]
 8005396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800539a:	eba3 0901 	sub.w	r9, r3, r1
 800539e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053a2:	1c7b      	adds	r3, r7, #1
 80053a4:	444b      	add	r3, r9
 80053a6:	106d      	asrs	r5, r5, #1
 80053a8:	429d      	cmp	r5, r3
 80053aa:	bf38      	it	cc
 80053ac:	461d      	movcc	r5, r3
 80053ae:	0553      	lsls	r3, r2, #21
 80053b0:	d527      	bpl.n	8005402 <__ssputs_r+0x8e>
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7ff ff52 	bl	800525c <_malloc_r>
 80053b8:	4606      	mov	r6, r0
 80053ba:	b360      	cbz	r0, 8005416 <__ssputs_r+0xa2>
 80053bc:	6921      	ldr	r1, [r4, #16]
 80053be:	464a      	mov	r2, r9
 80053c0:	f000 fae6 	bl	8005990 <memcpy>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	6126      	str	r6, [r4, #16]
 80053d2:	6165      	str	r5, [r4, #20]
 80053d4:	444e      	add	r6, r9
 80053d6:	eba5 0509 	sub.w	r5, r5, r9
 80053da:	6026      	str	r6, [r4, #0]
 80053dc:	60a5      	str	r5, [r4, #8]
 80053de:	463e      	mov	r6, r7
 80053e0:	42be      	cmp	r6, r7
 80053e2:	d900      	bls.n	80053e6 <__ssputs_r+0x72>
 80053e4:	463e      	mov	r6, r7
 80053e6:	6820      	ldr	r0, [r4, #0]
 80053e8:	4632      	mov	r2, r6
 80053ea:	4641      	mov	r1, r8
 80053ec:	f000 faa6 	bl	800593c <memmove>
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	1b9b      	subs	r3, r3, r6
 80053f4:	60a3      	str	r3, [r4, #8]
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	4433      	add	r3, r6
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2000      	movs	r0, #0
 80053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005402:	462a      	mov	r2, r5
 8005404:	f000 fad2 	bl	80059ac <_realloc_r>
 8005408:	4606      	mov	r6, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	d1e0      	bne.n	80053d0 <__ssputs_r+0x5c>
 800540e:	6921      	ldr	r1, [r4, #16]
 8005410:	4650      	mov	r0, sl
 8005412:	f7ff feb7 	bl	8005184 <_free_r>
 8005416:	230c      	movs	r3, #12
 8005418:	f8ca 3000 	str.w	r3, [sl]
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e7e9      	b.n	80053fe <__ssputs_r+0x8a>
	...

0800542c <_svfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	4698      	mov	r8, r3
 8005432:	898b      	ldrh	r3, [r1, #12]
 8005434:	061b      	lsls	r3, r3, #24
 8005436:	b09d      	sub	sp, #116	@ 0x74
 8005438:	4607      	mov	r7, r0
 800543a:	460d      	mov	r5, r1
 800543c:	4614      	mov	r4, r2
 800543e:	d510      	bpl.n	8005462 <_svfiprintf_r+0x36>
 8005440:	690b      	ldr	r3, [r1, #16]
 8005442:	b973      	cbnz	r3, 8005462 <_svfiprintf_r+0x36>
 8005444:	2140      	movs	r1, #64	@ 0x40
 8005446:	f7ff ff09 	bl	800525c <_malloc_r>
 800544a:	6028      	str	r0, [r5, #0]
 800544c:	6128      	str	r0, [r5, #16]
 800544e:	b930      	cbnz	r0, 800545e <_svfiprintf_r+0x32>
 8005450:	230c      	movs	r3, #12
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b01d      	add	sp, #116	@ 0x74
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545e:	2340      	movs	r3, #64	@ 0x40
 8005460:	616b      	str	r3, [r5, #20]
 8005462:	2300      	movs	r3, #0
 8005464:	9309      	str	r3, [sp, #36]	@ 0x24
 8005466:	2320      	movs	r3, #32
 8005468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800546c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005470:	2330      	movs	r3, #48	@ 0x30
 8005472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005610 <_svfiprintf_r+0x1e4>
 8005476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800547a:	f04f 0901 	mov.w	r9, #1
 800547e:	4623      	mov	r3, r4
 8005480:	469a      	mov	sl, r3
 8005482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005486:	b10a      	cbz	r2, 800548c <_svfiprintf_r+0x60>
 8005488:	2a25      	cmp	r2, #37	@ 0x25
 800548a:	d1f9      	bne.n	8005480 <_svfiprintf_r+0x54>
 800548c:	ebba 0b04 	subs.w	fp, sl, r4
 8005490:	d00b      	beq.n	80054aa <_svfiprintf_r+0x7e>
 8005492:	465b      	mov	r3, fp
 8005494:	4622      	mov	r2, r4
 8005496:	4629      	mov	r1, r5
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff ff6b 	bl	8005374 <__ssputs_r>
 800549e:	3001      	adds	r0, #1
 80054a0:	f000 80a7 	beq.w	80055f2 <_svfiprintf_r+0x1c6>
 80054a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054a6:	445a      	add	r2, fp
 80054a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80054aa:	f89a 3000 	ldrb.w	r3, [sl]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 809f 	beq.w	80055f2 <_svfiprintf_r+0x1c6>
 80054b4:	2300      	movs	r3, #0
 80054b6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054be:	f10a 0a01 	add.w	sl, sl, #1
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80054cc:	4654      	mov	r4, sl
 80054ce:	2205      	movs	r2, #5
 80054d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d4:	484e      	ldr	r0, [pc, #312]	@ (8005610 <_svfiprintf_r+0x1e4>)
 80054d6:	f7fa fe8b 	bl	80001f0 <memchr>
 80054da:	9a04      	ldr	r2, [sp, #16]
 80054dc:	b9d8      	cbnz	r0, 8005516 <_svfiprintf_r+0xea>
 80054de:	06d0      	lsls	r0, r2, #27
 80054e0:	bf44      	itt	mi
 80054e2:	2320      	movmi	r3, #32
 80054e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054e8:	0711      	lsls	r1, r2, #28
 80054ea:	bf44      	itt	mi
 80054ec:	232b      	movmi	r3, #43	@ 0x2b
 80054ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054f2:	f89a 3000 	ldrb.w	r3, [sl]
 80054f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f8:	d015      	beq.n	8005526 <_svfiprintf_r+0xfa>
 80054fa:	9a07      	ldr	r2, [sp, #28]
 80054fc:	4654      	mov	r4, sl
 80054fe:	2000      	movs	r0, #0
 8005500:	f04f 0c0a 	mov.w	ip, #10
 8005504:	4621      	mov	r1, r4
 8005506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800550a:	3b30      	subs	r3, #48	@ 0x30
 800550c:	2b09      	cmp	r3, #9
 800550e:	d94b      	bls.n	80055a8 <_svfiprintf_r+0x17c>
 8005510:	b1b0      	cbz	r0, 8005540 <_svfiprintf_r+0x114>
 8005512:	9207      	str	r2, [sp, #28]
 8005514:	e014      	b.n	8005540 <_svfiprintf_r+0x114>
 8005516:	eba0 0308 	sub.w	r3, r0, r8
 800551a:	fa09 f303 	lsl.w	r3, r9, r3
 800551e:	4313      	orrs	r3, r2
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	46a2      	mov	sl, r4
 8005524:	e7d2      	b.n	80054cc <_svfiprintf_r+0xa0>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	1d19      	adds	r1, r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	9103      	str	r1, [sp, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfbb      	ittet	lt
 8005532:	425b      	neglt	r3, r3
 8005534:	f042 0202 	orrlt.w	r2, r2, #2
 8005538:	9307      	strge	r3, [sp, #28]
 800553a:	9307      	strlt	r3, [sp, #28]
 800553c:	bfb8      	it	lt
 800553e:	9204      	strlt	r2, [sp, #16]
 8005540:	7823      	ldrb	r3, [r4, #0]
 8005542:	2b2e      	cmp	r3, #46	@ 0x2e
 8005544:	d10a      	bne.n	800555c <_svfiprintf_r+0x130>
 8005546:	7863      	ldrb	r3, [r4, #1]
 8005548:	2b2a      	cmp	r3, #42	@ 0x2a
 800554a:	d132      	bne.n	80055b2 <_svfiprintf_r+0x186>
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	9203      	str	r2, [sp, #12]
 8005554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005558:	3402      	adds	r4, #2
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005620 <_svfiprintf_r+0x1f4>
 8005560:	7821      	ldrb	r1, [r4, #0]
 8005562:	2203      	movs	r2, #3
 8005564:	4650      	mov	r0, sl
 8005566:	f7fa fe43 	bl	80001f0 <memchr>
 800556a:	b138      	cbz	r0, 800557c <_svfiprintf_r+0x150>
 800556c:	9b04      	ldr	r3, [sp, #16]
 800556e:	eba0 000a 	sub.w	r0, r0, sl
 8005572:	2240      	movs	r2, #64	@ 0x40
 8005574:	4082      	lsls	r2, r0
 8005576:	4313      	orrs	r3, r2
 8005578:	3401      	adds	r4, #1
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005580:	4824      	ldr	r0, [pc, #144]	@ (8005614 <_svfiprintf_r+0x1e8>)
 8005582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005586:	2206      	movs	r2, #6
 8005588:	f7fa fe32 	bl	80001f0 <memchr>
 800558c:	2800      	cmp	r0, #0
 800558e:	d036      	beq.n	80055fe <_svfiprintf_r+0x1d2>
 8005590:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <_svfiprintf_r+0x1ec>)
 8005592:	bb1b      	cbnz	r3, 80055dc <_svfiprintf_r+0x1b0>
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	3307      	adds	r3, #7
 8005598:	f023 0307 	bic.w	r3, r3, #7
 800559c:	3308      	adds	r3, #8
 800559e:	9303      	str	r3, [sp, #12]
 80055a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055a2:	4433      	add	r3, r6
 80055a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a6:	e76a      	b.n	800547e <_svfiprintf_r+0x52>
 80055a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ac:	460c      	mov	r4, r1
 80055ae:	2001      	movs	r0, #1
 80055b0:	e7a8      	b.n	8005504 <_svfiprintf_r+0xd8>
 80055b2:	2300      	movs	r3, #0
 80055b4:	3401      	adds	r4, #1
 80055b6:	9305      	str	r3, [sp, #20]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f04f 0c0a 	mov.w	ip, #10
 80055be:	4620      	mov	r0, r4
 80055c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055c4:	3a30      	subs	r2, #48	@ 0x30
 80055c6:	2a09      	cmp	r2, #9
 80055c8:	d903      	bls.n	80055d2 <_svfiprintf_r+0x1a6>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0c6      	beq.n	800555c <_svfiprintf_r+0x130>
 80055ce:	9105      	str	r1, [sp, #20]
 80055d0:	e7c4      	b.n	800555c <_svfiprintf_r+0x130>
 80055d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d6:	4604      	mov	r4, r0
 80055d8:	2301      	movs	r3, #1
 80055da:	e7f0      	b.n	80055be <_svfiprintf_r+0x192>
 80055dc:	ab03      	add	r3, sp, #12
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	462a      	mov	r2, r5
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <_svfiprintf_r+0x1f0>)
 80055e4:	a904      	add	r1, sp, #16
 80055e6:	4638      	mov	r0, r7
 80055e8:	f3af 8000 	nop.w
 80055ec:	1c42      	adds	r2, r0, #1
 80055ee:	4606      	mov	r6, r0
 80055f0:	d1d6      	bne.n	80055a0 <_svfiprintf_r+0x174>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	065b      	lsls	r3, r3, #25
 80055f6:	f53f af2d 	bmi.w	8005454 <_svfiprintf_r+0x28>
 80055fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055fc:	e72c      	b.n	8005458 <_svfiprintf_r+0x2c>
 80055fe:	ab03      	add	r3, sp, #12
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4b05      	ldr	r3, [pc, #20]	@ (800561c <_svfiprintf_r+0x1f0>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	4638      	mov	r0, r7
 800560a:	f000 f879 	bl	8005700 <_printf_i>
 800560e:	e7ed      	b.n	80055ec <_svfiprintf_r+0x1c0>
 8005610:	08005ac0 	.word	0x08005ac0
 8005614:	08005aca 	.word	0x08005aca
 8005618:	00000000 	.word	0x00000000
 800561c:	08005375 	.word	0x08005375
 8005620:	08005ac6 	.word	0x08005ac6

08005624 <_printf_common>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	4616      	mov	r6, r2
 800562a:	4698      	mov	r8, r3
 800562c:	688a      	ldr	r2, [r1, #8]
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005634:	4293      	cmp	r3, r2
 8005636:	bfb8      	it	lt
 8005638:	4613      	movlt	r3, r2
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005640:	4607      	mov	r7, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b10a      	cbz	r2, 800564a <_printf_common+0x26>
 8005646:	3301      	adds	r3, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	6833      	ldrmi	r3, [r6, #0]
 8005652:	3302      	addmi	r3, #2
 8005654:	6033      	strmi	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d106      	bne.n	800566c <_printf_common+0x48>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	42ab      	cmp	r3, r5
 800566a:	dc26      	bgt.n	80056ba <_printf_common+0x96>
 800566c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	3b00      	subs	r3, #0
 8005674:	bf18      	it	ne
 8005676:	2301      	movne	r3, #1
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d42b      	bmi.n	80056d4 <_printf_common+0xb0>
 800567c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005680:	4641      	mov	r1, r8
 8005682:	4638      	mov	r0, r7
 8005684:	47c8      	blx	r9
 8005686:	3001      	adds	r0, #1
 8005688:	d01e      	beq.n	80056c8 <_printf_common+0xa4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	6922      	ldr	r2, [r4, #16]
 800568e:	f003 0306 	and.w	r3, r3, #6
 8005692:	2b04      	cmp	r3, #4
 8005694:	bf02      	ittt	eq
 8005696:	68e5      	ldreq	r5, [r4, #12]
 8005698:	6833      	ldreq	r3, [r6, #0]
 800569a:	1aed      	subeq	r5, r5, r3
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	bf0c      	ite	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	2500      	movne	r5, #0
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bfc4      	itt	gt
 80056aa:	1a9b      	subgt	r3, r3, r2
 80056ac:	18ed      	addgt	r5, r5, r3
 80056ae:	2600      	movs	r6, #0
 80056b0:	341a      	adds	r4, #26
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d11a      	bne.n	80056ec <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e008      	b.n	80056cc <_printf_common+0xa8>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4641      	mov	r1, r8
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c8      	blx	r9
 80056c4:	3001      	adds	r0, #1
 80056c6:	d103      	bne.n	80056d0 <_printf_common+0xac>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	3501      	adds	r5, #1
 80056d2:	e7c6      	b.n	8005662 <_printf_common+0x3e>
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	2030      	movs	r0, #48	@ 0x30
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056de:	4422      	add	r2, r4
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7c7      	b.n	800567c <_printf_common+0x58>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4622      	mov	r2, r4
 80056f0:	4641      	mov	r1, r8
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c8      	blx	r9
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa4>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d9      	b.n	80056b2 <_printf_common+0x8e>
	...

08005700 <_printf_i>:
 8005700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	7e0f      	ldrb	r7, [r1, #24]
 8005706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005708:	2f78      	cmp	r7, #120	@ 0x78
 800570a:	4691      	mov	r9, r2
 800570c:	4680      	mov	r8, r0
 800570e:	460c      	mov	r4, r1
 8005710:	469a      	mov	sl, r3
 8005712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005716:	d807      	bhi.n	8005728 <_printf_i+0x28>
 8005718:	2f62      	cmp	r7, #98	@ 0x62
 800571a:	d80a      	bhi.n	8005732 <_printf_i+0x32>
 800571c:	2f00      	cmp	r7, #0
 800571e:	f000 80d1 	beq.w	80058c4 <_printf_i+0x1c4>
 8005722:	2f58      	cmp	r7, #88	@ 0x58
 8005724:	f000 80b8 	beq.w	8005898 <_printf_i+0x198>
 8005728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800572c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005730:	e03a      	b.n	80057a8 <_printf_i+0xa8>
 8005732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005736:	2b15      	cmp	r3, #21
 8005738:	d8f6      	bhi.n	8005728 <_printf_i+0x28>
 800573a:	a101      	add	r1, pc, #4	@ (adr r1, 8005740 <_printf_i+0x40>)
 800573c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005740:	08005799 	.word	0x08005799
 8005744:	080057ad 	.word	0x080057ad
 8005748:	08005729 	.word	0x08005729
 800574c:	08005729 	.word	0x08005729
 8005750:	08005729 	.word	0x08005729
 8005754:	08005729 	.word	0x08005729
 8005758:	080057ad 	.word	0x080057ad
 800575c:	08005729 	.word	0x08005729
 8005760:	08005729 	.word	0x08005729
 8005764:	08005729 	.word	0x08005729
 8005768:	08005729 	.word	0x08005729
 800576c:	080058ab 	.word	0x080058ab
 8005770:	080057d7 	.word	0x080057d7
 8005774:	08005865 	.word	0x08005865
 8005778:	08005729 	.word	0x08005729
 800577c:	08005729 	.word	0x08005729
 8005780:	080058cd 	.word	0x080058cd
 8005784:	08005729 	.word	0x08005729
 8005788:	080057d7 	.word	0x080057d7
 800578c:	08005729 	.word	0x08005729
 8005790:	08005729 	.word	0x08005729
 8005794:	0800586d 	.word	0x0800586d
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6032      	str	r2, [r6, #0]
 80057a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e09c      	b.n	80058e6 <_printf_i+0x1e6>
 80057ac:	6833      	ldr	r3, [r6, #0]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1d19      	adds	r1, r3, #4
 80057b2:	6031      	str	r1, [r6, #0]
 80057b4:	0606      	lsls	r6, r0, #24
 80057b6:	d501      	bpl.n	80057bc <_printf_i+0xbc>
 80057b8:	681d      	ldr	r5, [r3, #0]
 80057ba:	e003      	b.n	80057c4 <_printf_i+0xc4>
 80057bc:	0645      	lsls	r5, r0, #25
 80057be:	d5fb      	bpl.n	80057b8 <_printf_i+0xb8>
 80057c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	da03      	bge.n	80057d0 <_printf_i+0xd0>
 80057c8:	232d      	movs	r3, #45	@ 0x2d
 80057ca:	426d      	negs	r5, r5
 80057cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057d0:	4858      	ldr	r0, [pc, #352]	@ (8005934 <_printf_i+0x234>)
 80057d2:	230a      	movs	r3, #10
 80057d4:	e011      	b.n	80057fa <_printf_i+0xfa>
 80057d6:	6821      	ldr	r1, [r4, #0]
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	0608      	lsls	r0, r1, #24
 80057dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80057e0:	d402      	bmi.n	80057e8 <_printf_i+0xe8>
 80057e2:	0649      	lsls	r1, r1, #25
 80057e4:	bf48      	it	mi
 80057e6:	b2ad      	uxthmi	r5, r5
 80057e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80057ea:	4852      	ldr	r0, [pc, #328]	@ (8005934 <_printf_i+0x234>)
 80057ec:	6033      	str	r3, [r6, #0]
 80057ee:	bf14      	ite	ne
 80057f0:	230a      	movne	r3, #10
 80057f2:	2308      	moveq	r3, #8
 80057f4:	2100      	movs	r1, #0
 80057f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057fa:	6866      	ldr	r6, [r4, #4]
 80057fc:	60a6      	str	r6, [r4, #8]
 80057fe:	2e00      	cmp	r6, #0
 8005800:	db05      	blt.n	800580e <_printf_i+0x10e>
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	432e      	orrs	r6, r5
 8005806:	f021 0104 	bic.w	r1, r1, #4
 800580a:	6021      	str	r1, [r4, #0]
 800580c:	d04b      	beq.n	80058a6 <_printf_i+0x1a6>
 800580e:	4616      	mov	r6, r2
 8005810:	fbb5 f1f3 	udiv	r1, r5, r3
 8005814:	fb03 5711 	mls	r7, r3, r1, r5
 8005818:	5dc7      	ldrb	r7, [r0, r7]
 800581a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800581e:	462f      	mov	r7, r5
 8005820:	42bb      	cmp	r3, r7
 8005822:	460d      	mov	r5, r1
 8005824:	d9f4      	bls.n	8005810 <_printf_i+0x110>
 8005826:	2b08      	cmp	r3, #8
 8005828:	d10b      	bne.n	8005842 <_printf_i+0x142>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	07df      	lsls	r7, r3, #31
 800582e:	d508      	bpl.n	8005842 <_printf_i+0x142>
 8005830:	6923      	ldr	r3, [r4, #16]
 8005832:	6861      	ldr	r1, [r4, #4]
 8005834:	4299      	cmp	r1, r3
 8005836:	bfde      	ittt	le
 8005838:	2330      	movle	r3, #48	@ 0x30
 800583a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800583e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005842:	1b92      	subs	r2, r2, r6
 8005844:	6122      	str	r2, [r4, #16]
 8005846:	f8cd a000 	str.w	sl, [sp]
 800584a:	464b      	mov	r3, r9
 800584c:	aa03      	add	r2, sp, #12
 800584e:	4621      	mov	r1, r4
 8005850:	4640      	mov	r0, r8
 8005852:	f7ff fee7 	bl	8005624 <_printf_common>
 8005856:	3001      	adds	r0, #1
 8005858:	d14a      	bne.n	80058f0 <_printf_i+0x1f0>
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	b004      	add	sp, #16
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	f043 0320 	orr.w	r3, r3, #32
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	4832      	ldr	r0, [pc, #200]	@ (8005938 <_printf_i+0x238>)
 800586e:	2778      	movs	r7, #120	@ 0x78
 8005870:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	6831      	ldr	r1, [r6, #0]
 8005878:	061f      	lsls	r7, r3, #24
 800587a:	f851 5b04 	ldr.w	r5, [r1], #4
 800587e:	d402      	bmi.n	8005886 <_printf_i+0x186>
 8005880:	065f      	lsls	r7, r3, #25
 8005882:	bf48      	it	mi
 8005884:	b2ad      	uxthmi	r5, r5
 8005886:	6031      	str	r1, [r6, #0]
 8005888:	07d9      	lsls	r1, r3, #31
 800588a:	bf44      	itt	mi
 800588c:	f043 0320 	orrmi.w	r3, r3, #32
 8005890:	6023      	strmi	r3, [r4, #0]
 8005892:	b11d      	cbz	r5, 800589c <_printf_i+0x19c>
 8005894:	2310      	movs	r3, #16
 8005896:	e7ad      	b.n	80057f4 <_printf_i+0xf4>
 8005898:	4826      	ldr	r0, [pc, #152]	@ (8005934 <_printf_i+0x234>)
 800589a:	e7e9      	b.n	8005870 <_printf_i+0x170>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	f023 0320 	bic.w	r3, r3, #32
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	e7f6      	b.n	8005894 <_printf_i+0x194>
 80058a6:	4616      	mov	r6, r2
 80058a8:	e7bd      	b.n	8005826 <_printf_i+0x126>
 80058aa:	6833      	ldr	r3, [r6, #0]
 80058ac:	6825      	ldr	r5, [r4, #0]
 80058ae:	6961      	ldr	r1, [r4, #20]
 80058b0:	1d18      	adds	r0, r3, #4
 80058b2:	6030      	str	r0, [r6, #0]
 80058b4:	062e      	lsls	r6, r5, #24
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	d501      	bpl.n	80058be <_printf_i+0x1be>
 80058ba:	6019      	str	r1, [r3, #0]
 80058bc:	e002      	b.n	80058c4 <_printf_i+0x1c4>
 80058be:	0668      	lsls	r0, r5, #25
 80058c0:	d5fb      	bpl.n	80058ba <_printf_i+0x1ba>
 80058c2:	8019      	strh	r1, [r3, #0]
 80058c4:	2300      	movs	r3, #0
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	4616      	mov	r6, r2
 80058ca:	e7bc      	b.n	8005846 <_printf_i+0x146>
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	6032      	str	r2, [r6, #0]
 80058d2:	681e      	ldr	r6, [r3, #0]
 80058d4:	6862      	ldr	r2, [r4, #4]
 80058d6:	2100      	movs	r1, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	f7fa fc89 	bl	80001f0 <memchr>
 80058de:	b108      	cbz	r0, 80058e4 <_printf_i+0x1e4>
 80058e0:	1b80      	subs	r0, r0, r6
 80058e2:	6060      	str	r0, [r4, #4]
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	6123      	str	r3, [r4, #16]
 80058e8:	2300      	movs	r3, #0
 80058ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ee:	e7aa      	b.n	8005846 <_printf_i+0x146>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	4632      	mov	r2, r6
 80058f4:	4649      	mov	r1, r9
 80058f6:	4640      	mov	r0, r8
 80058f8:	47d0      	blx	sl
 80058fa:	3001      	adds	r0, #1
 80058fc:	d0ad      	beq.n	800585a <_printf_i+0x15a>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	079b      	lsls	r3, r3, #30
 8005902:	d413      	bmi.n	800592c <_printf_i+0x22c>
 8005904:	68e0      	ldr	r0, [r4, #12]
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	4298      	cmp	r0, r3
 800590a:	bfb8      	it	lt
 800590c:	4618      	movlt	r0, r3
 800590e:	e7a6      	b.n	800585e <_printf_i+0x15e>
 8005910:	2301      	movs	r3, #1
 8005912:	4632      	mov	r2, r6
 8005914:	4649      	mov	r1, r9
 8005916:	4640      	mov	r0, r8
 8005918:	47d0      	blx	sl
 800591a:	3001      	adds	r0, #1
 800591c:	d09d      	beq.n	800585a <_printf_i+0x15a>
 800591e:	3501      	adds	r5, #1
 8005920:	68e3      	ldr	r3, [r4, #12]
 8005922:	9903      	ldr	r1, [sp, #12]
 8005924:	1a5b      	subs	r3, r3, r1
 8005926:	42ab      	cmp	r3, r5
 8005928:	dcf2      	bgt.n	8005910 <_printf_i+0x210>
 800592a:	e7eb      	b.n	8005904 <_printf_i+0x204>
 800592c:	2500      	movs	r5, #0
 800592e:	f104 0619 	add.w	r6, r4, #25
 8005932:	e7f5      	b.n	8005920 <_printf_i+0x220>
 8005934:	08005ad1 	.word	0x08005ad1
 8005938:	08005ae2 	.word	0x08005ae2

0800593c <memmove>:
 800593c:	4288      	cmp	r0, r1
 800593e:	b510      	push	{r4, lr}
 8005940:	eb01 0402 	add.w	r4, r1, r2
 8005944:	d902      	bls.n	800594c <memmove+0x10>
 8005946:	4284      	cmp	r4, r0
 8005948:	4623      	mov	r3, r4
 800594a:	d807      	bhi.n	800595c <memmove+0x20>
 800594c:	1e43      	subs	r3, r0, #1
 800594e:	42a1      	cmp	r1, r4
 8005950:	d008      	beq.n	8005964 <memmove+0x28>
 8005952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800595a:	e7f8      	b.n	800594e <memmove+0x12>
 800595c:	4402      	add	r2, r0
 800595e:	4601      	mov	r1, r0
 8005960:	428a      	cmp	r2, r1
 8005962:	d100      	bne.n	8005966 <memmove+0x2a>
 8005964:	bd10      	pop	{r4, pc}
 8005966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800596a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800596e:	e7f7      	b.n	8005960 <memmove+0x24>

08005970 <_sbrk_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d06      	ldr	r5, [pc, #24]	@ (800598c <_sbrk_r+0x1c>)
 8005974:	2300      	movs	r3, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	602b      	str	r3, [r5, #0]
 800597c:	f7fb f82a 	bl	80009d4 <_sbrk>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_sbrk_r+0x1a>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_sbrk_r+0x1a>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000390 	.word	0x20000390

08005990 <memcpy>:
 8005990:	440a      	add	r2, r1
 8005992:	4291      	cmp	r1, r2
 8005994:	f100 33ff 	add.w	r3, r0, #4294967295
 8005998:	d100      	bne.n	800599c <memcpy+0xc>
 800599a:	4770      	bx	lr
 800599c:	b510      	push	{r4, lr}
 800599e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a6:	4291      	cmp	r1, r2
 80059a8:	d1f9      	bne.n	800599e <memcpy+0xe>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <_realloc_r>:
 80059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b0:	4607      	mov	r7, r0
 80059b2:	4614      	mov	r4, r2
 80059b4:	460d      	mov	r5, r1
 80059b6:	b921      	cbnz	r1, 80059c2 <_realloc_r+0x16>
 80059b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	4611      	mov	r1, r2
 80059be:	f7ff bc4d 	b.w	800525c <_malloc_r>
 80059c2:	b92a      	cbnz	r2, 80059d0 <_realloc_r+0x24>
 80059c4:	f7ff fbde 	bl	8005184 <_free_r>
 80059c8:	4625      	mov	r5, r4
 80059ca:	4628      	mov	r0, r5
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	f000 f81a 	bl	8005a08 <_malloc_usable_size_r>
 80059d4:	4284      	cmp	r4, r0
 80059d6:	4606      	mov	r6, r0
 80059d8:	d802      	bhi.n	80059e0 <_realloc_r+0x34>
 80059da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059de:	d8f4      	bhi.n	80059ca <_realloc_r+0x1e>
 80059e0:	4621      	mov	r1, r4
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff fc3a 	bl	800525c <_malloc_r>
 80059e8:	4680      	mov	r8, r0
 80059ea:	b908      	cbnz	r0, 80059f0 <_realloc_r+0x44>
 80059ec:	4645      	mov	r5, r8
 80059ee:	e7ec      	b.n	80059ca <_realloc_r+0x1e>
 80059f0:	42b4      	cmp	r4, r6
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	bf28      	it	cs
 80059f8:	4632      	movcs	r2, r6
 80059fa:	f7ff ffc9 	bl	8005990 <memcpy>
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff fbbf 	bl	8005184 <_free_r>
 8005a06:	e7f1      	b.n	80059ec <_realloc_r+0x40>

08005a08 <_malloc_usable_size_r>:
 8005a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a0c:	1f18      	subs	r0, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfbc      	itt	lt
 8005a12:	580b      	ldrlt	r3, [r1, r0]
 8005a14:	18c0      	addlt	r0, r0, r3
 8005a16:	4770      	bx	lr

08005a18 <_init>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr

08005a24 <_fini>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr
