
20250620_FND_TIM_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b28  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000cc0  08000cc0  00001cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ccc  08000ccc  00002068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ccc  08000ccc  00002068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ccc  08000ccc  00002068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ccc  08000ccc  00001ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cd0  08000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08000cd4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000068  08000d3c  00002068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08000d3c  000020cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c23  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b99  00000000  00000000  00003cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000258  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000195  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e3c8  00000000  00000000  00004c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003629  00000000  00000000  0001300d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005084e  00000000  00000000  00016636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006c8  00000000  00000000  00066ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00067590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ca8 	.word	0x08000ca8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08000ca8 	.word	0x08000ca8

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <TIM2_IRQHandler>:
	RUN,
	CLEAR
}STOP_WATCH_STATE_E;

void TIM2_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	incTick();
 8000218:	f000 fc32 	bl	8000a80 <incTick>
	FND_DisplayData();
 800021c:	f000 fb5a 	bl	80008d4 <FND_DisplayData>
	TIM_ClearUIFlag(TIM2);
 8000220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000224:	f000 fcdb 	bl	8000bde <TIM_ClearUIFlag>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <Clock>:

int stopwatch_state = STOP;
int mode_state = CLOCK_MODE;

void Clock()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	static uint32_t prevCounterTime = 0;
	clock.msec = getTick() - prevCounterTime;
 8000230:	f000 fc1a 	bl	8000a68 <getTick>
 8000234:	4602      	mov	r2, r0
 8000236:	4b1e      	ldr	r3, [pc, #120]	@ (80002b0 <Clock+0x84>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	4a1d      	ldr	r2, [pc, #116]	@ (80002b4 <Clock+0x88>)
 800023e:	6053      	str	r3, [r2, #4]
	if (clock.msec >= 1000) {
 8000240:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <Clock+0x88>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000248:	d32f      	bcc.n	80002aa <Clock+0x7e>
		prevCounterTime = getTick();
 800024a:	f000 fc0d 	bl	8000a68 <getTick>
 800024e:	4603      	mov	r3, r0
 8000250:	4a17      	ldr	r2, [pc, #92]	@ (80002b0 <Clock+0x84>)
 8000252:	6013      	str	r3, [r2, #0]
		clock.sec++;
 8000254:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <Clock+0x88>)
 8000256:	789b      	ldrb	r3, [r3, #2]
 8000258:	3301      	adds	r3, #1
 800025a:	b2da      	uxtb	r2, r3
 800025c:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <Clock+0x88>)
 800025e:	709a      	strb	r2, [r3, #2]
		if (clock.sec >= 60) {
 8000260:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <Clock+0x88>)
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	2b3b      	cmp	r3, #59	@ 0x3b
 8000266:	d908      	bls.n	800027a <Clock+0x4e>
			clock.sec=0;
 8000268:	4b12      	ldr	r3, [pc, #72]	@ (80002b4 <Clock+0x88>)
 800026a:	2200      	movs	r2, #0
 800026c:	709a      	strb	r2, [r3, #2]
			clock.min++;
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <Clock+0x88>)
 8000270:	785b      	ldrb	r3, [r3, #1]
 8000272:	3301      	adds	r3, #1
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <Clock+0x88>)
 8000278:	705a      	strb	r2, [r3, #1]
		}
		if (clock.min >= 60) {
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <Clock+0x88>)
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000280:	d913      	bls.n	80002aa <Clock+0x7e>
			clock.min=0;
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <Clock+0x88>)
 8000284:	2200      	movs	r2, #0
 8000286:	705a      	strb	r2, [r3, #1]
			clock.hour=(clock.hour+1)%24;
 8000288:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <Clock+0x88>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	1c5a      	adds	r2, r3, #1
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <Clock+0x8c>)
 8000290:	fb83 1302 	smull	r1, r3, r3, r2
 8000294:	1099      	asrs	r1, r3, #2
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac9      	subs	r1, r1, r3
 800029a:	460b      	mov	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	1ad1      	subs	r1, r2, r3
 80002a4:	b2ca      	uxtb	r2, r1
 80002a6:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <Clock+0x88>)
 80002a8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000b8 	.word	0x200000b8
 80002b4:	20000000 	.word	0x20000000
 80002b8:	2aaaaaab 	.word	0x2aaaaaab

080002bc <Stopwatch>:

void Stopwatch()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	static uint32_t prevCounterTime = 0;
	// 동작
	switch (stopwatch_state) {
 80002c0:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <Stopwatch+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d032      	beq.n	800032e <Stopwatch+0x72>
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	dc3b      	bgt.n	8000344 <Stopwatch+0x88>
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d002      	beq.n	80002d6 <Stopwatch+0x1a>
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d006      	beq.n	80002e2 <Stopwatch+0x26>
		stopwatch.min = 0;
		stopwatch.sec = 0;
		stopwatch.msec = 0;
		break;
	}
}
 80002d4:	e036      	b.n	8000344 <Stopwatch+0x88>
		prevCounterTime = getTick();
 80002d6:	f000 fbc7 	bl	8000a68 <getTick>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a1b      	ldr	r2, [pc, #108]	@ (800034c <Stopwatch+0x90>)
 80002de:	6013      	str	r3, [r2, #0]
		break;
 80002e0:	e030      	b.n	8000344 <Stopwatch+0x88>
		stopwatch.msec = getTick() - prevCounterTime;
 80002e2:	f000 fbc1 	bl	8000a68 <getTick>
 80002e6:	4602      	mov	r2, r0
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <Stopwatch+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1ad3      	subs	r3, r2, r3
 80002ee:	4a18      	ldr	r2, [pc, #96]	@ (8000350 <Stopwatch+0x94>)
 80002f0:	6053      	str	r3, [r2, #4]
		if ((stopwatch.msec) >= 1000) {
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <Stopwatch+0x94>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002fa:	d322      	bcc.n	8000342 <Stopwatch+0x86>
			prevCounterTime = getTick();
 80002fc:	f000 fbb4 	bl	8000a68 <getTick>
 8000300:	4603      	mov	r3, r0
 8000302:	4a12      	ldr	r2, [pc, #72]	@ (800034c <Stopwatch+0x90>)
 8000304:	6013      	str	r3, [r2, #0]
			stopwatch.sec++;
 8000306:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <Stopwatch+0x94>)
 8000308:	789b      	ldrb	r3, [r3, #2]
 800030a:	3301      	adds	r3, #1
 800030c:	b2da      	uxtb	r2, r3
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <Stopwatch+0x94>)
 8000310:	709a      	strb	r2, [r3, #2]
			if (stopwatch.sec>=60) {
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <Stopwatch+0x94>)
 8000314:	789b      	ldrb	r3, [r3, #2]
 8000316:	2b3b      	cmp	r3, #59	@ 0x3b
 8000318:	d913      	bls.n	8000342 <Stopwatch+0x86>
				stopwatch.sec = 0;
 800031a:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <Stopwatch+0x94>)
 800031c:	2200      	movs	r2, #0
 800031e:	709a      	strb	r2, [r3, #2]
				stopwatch.min++;
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <Stopwatch+0x94>)
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	3301      	adds	r3, #1
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <Stopwatch+0x94>)
 800032a:	705a      	strb	r2, [r3, #1]
		break;
 800032c:	e009      	b.n	8000342 <Stopwatch+0x86>
		stopwatch.min = 0;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <Stopwatch+0x94>)
 8000330:	2200      	movs	r2, #0
 8000332:	705a      	strb	r2, [r3, #1]
		stopwatch.sec = 0;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <Stopwatch+0x94>)
 8000336:	2200      	movs	r2, #0
 8000338:	709a      	strb	r2, [r3, #2]
		stopwatch.msec = 0;
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <Stopwatch+0x94>)
 800033c:	2200      	movs	r2, #0
 800033e:	605a      	str	r2, [r3, #4]
		break;
 8000340:	e000      	b.n	8000344 <Stopwatch+0x88>
		break;
 8000342:	bf00      	nop
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200000b0 	.word	0x200000b0
 800034c:	200000bc 	.word	0x200000bc
 8000350:	200000a8 	.word	0x200000a8

08000354 <getClockDataform>:

int getClockDataform(){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	return
			clock.hour*100 +
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <getClockDataform+0x20>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	2364      	movs	r3, #100	@ 0x64
 8000360:	fb02 f303 	mul.w	r3, r2, r3
			stopwatch.min;
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <getClockDataform+0x24>)
 8000366:	7852      	ldrb	r2, [r2, #1]
			clock.hour*100 +
 8000368:	4413      	add	r3, r2
}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	20000000 	.word	0x20000000
 8000378:	200000a8 	.word	0x200000a8

0800037c <getStopWatchDataReform>:
int getStopWatchDataReform(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	return
			stopwatch.min/10*1000 +
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <getStopWatchDataReform+0x48>)
 8000382:	785b      	ldrb	r3, [r3, #1]
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <getStopWatchDataReform+0x4c>)
 8000386:	fba2 2303 	umull	r2, r3, r2, r3
 800038a:	08db      	lsrs	r3, r3, #3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000394:	fb03 f202 	mul.w	r2, r3, r2
			stopwatch.sec*10 +
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <getStopWatchDataReform+0x48>)
 800039a:	789b      	ldrb	r3, [r3, #2]
 800039c:	4619      	mov	r1, r3
 800039e:	460b      	mov	r3, r1
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	440b      	add	r3, r1
 80003a4:	005b      	lsls	r3, r3, #1
			stopwatch.min/10*1000 +
 80003a6:	4413      	add	r3, r2
 80003a8:	4619      	mov	r1, r3
			stopwatch.msec/100;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <getStopWatchDataReform+0x48>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <getStopWatchDataReform+0x50>)
 80003b0:	fba2 2303 	umull	r2, r3, r2, r3
 80003b4:	095b      	lsrs	r3, r3, #5
			stopwatch.sec*10 +
 80003b6:	440b      	add	r3, r1
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	200000a8 	.word	0x200000a8
 80003c8:	cccccccd 	.word	0xcccccccd
 80003cc:	51eb851f 	.word	0x51eb851f

080003d0 <ap_main>:

int ap_main()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	int dotData = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]

	while (1)
	{
		dotData = 0b0000;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
		Clock();
 80003de:	f7ff ff25 	bl	800022c <Clock>
		Stopwatch();
 80003e2:	f7ff ff6b 	bl	80002bc <Stopwatch>

		switch (mode_state) {
 80003e6:	4b45      	ldr	r3, [pc, #276]	@ (80004fc <ap_main+0x12c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <ap_main+0x24>
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d01c      	beq.n	800042c <ap_main+0x5c>
 80003f2:	e082      	b.n	80004fa <ap_main+0x12a>
		case CLOCK_MODE:
			if(clock.msec >= 500){
 80003f4:	4b42      	ldr	r3, [pc, #264]	@ (8000500 <ap_main+0x130>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80003fc:	d303      	bcc.n	8000406 <ap_main+0x36>
				dotData |= (1U<<2);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
			}
			if (Button_GetState(&hBtnMode) == ACT_PUSHED) {
 8000406:	483f      	ldr	r0, [pc, #252]	@ (8000504 <ap_main+0x134>)
 8000408:	f000 f8d9 	bl	80005be <Button_GetState>
 800040c:	4603      	mov	r3, r0
 800040e:	2b01      	cmp	r3, #1
 8000410:	d102      	bne.n	8000418 <ap_main+0x48>
				mode_state = STOPWATCH_MODE;
 8000412:	4b3a      	ldr	r3, [pc, #232]	@ (80004fc <ap_main+0x12c>)
 8000414:	2201      	movs	r2, #1
 8000416:	601a      	str	r2, [r3, #0]
			}
			FND_WtireData(getClockDataform(), dotData);
 8000418:	f7ff ff9c 	bl	8000354 <getClockDataform>
 800041c:	4603      	mov	r3, r0
 800041e:	461a      	mov	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4619      	mov	r1, r3
 8000424:	4610      	mov	r0, r2
 8000426:	f000 fa3d 	bl	80008a4 <FND_WtireData>
			break;
 800042a:	e066      	b.n	80004fa <ap_main+0x12a>

		case STOPWATCH_MODE:
			if(stopwatch.msec % 100 >= 50){
 800042c:	4b36      	ldr	r3, [pc, #216]	@ (8000508 <ap_main+0x138>)
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	4b36      	ldr	r3, [pc, #216]	@ (800050c <ap_main+0x13c>)
 8000432:	fba3 1302 	umull	r1, r3, r3, r2
 8000436:	095b      	lsrs	r3, r3, #5
 8000438:	2164      	movs	r1, #100	@ 0x64
 800043a:	fb01 f303 	mul.w	r3, r1, r3
 800043e:	1ad3      	subs	r3, r2, r3
 8000440:	2b31      	cmp	r3, #49	@ 0x31
 8000442:	d903      	bls.n	800044c <ap_main+0x7c>
				dotData |= (1U<<1);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
			}
			if(stopwatch.msec >= 500){
 800044c:	4b2e      	ldr	r3, [pc, #184]	@ (8000508 <ap_main+0x138>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000454:	d303      	bcc.n	800045e <ap_main+0x8e>
				dotData |= (1U<<3);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f043 0308 	orr.w	r3, r3, #8
 800045c:	607b      	str	r3, [r7, #4]
			}
			// 상태천이ap
			switch (stopwatch_state)
 800045e:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <ap_main+0x140>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d038      	beq.n	80004d8 <ap_main+0x108>
 8000466:	2b02      	cmp	r3, #2
 8000468:	dc3d      	bgt.n	80004e6 <ap_main+0x116>
 800046a:	2b00      	cmp	r3, #0
 800046c:	d002      	beq.n	8000474 <ap_main+0xa4>
 800046e:	2b01      	cmp	r3, #1
 8000470:	d01e      	beq.n	80004b0 <ap_main+0xe0>
 8000472:	e038      	b.n	80004e6 <ap_main+0x116>
			{
			case STOP:
				if (Button_GetState(&hBtnMode) == ACT_PUSHED) mode_state = CLOCK_MODE;
 8000474:	4823      	ldr	r0, [pc, #140]	@ (8000504 <ap_main+0x134>)
 8000476:	f000 f8a2 	bl	80005be <Button_GetState>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d103      	bne.n	8000488 <ap_main+0xb8>
 8000480:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <ap_main+0x12c>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = RUN;
				else if (Button_GetState(&hBtnClear) == ACT_PUSHED) stopwatch_state = CLEAR;
				break;
 8000486:	e02b      	b.n	80004e0 <ap_main+0x110>
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = RUN;
 8000488:	4822      	ldr	r0, [pc, #136]	@ (8000514 <ap_main+0x144>)
 800048a:	f000 f898 	bl	80005be <Button_GetState>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	d103      	bne.n	800049c <ap_main+0xcc>
 8000494:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <ap_main+0x140>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
				break;
 800049a:	e021      	b.n	80004e0 <ap_main+0x110>
				else if (Button_GetState(&hBtnClear) == ACT_PUSHED) stopwatch_state = CLEAR;
 800049c:	481e      	ldr	r0, [pc, #120]	@ (8000518 <ap_main+0x148>)
 800049e:	f000 f88e 	bl	80005be <Button_GetState>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d11b      	bne.n	80004e0 <ap_main+0x110>
 80004a8:	4b19      	ldr	r3, [pc, #100]	@ (8000510 <ap_main+0x140>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	601a      	str	r2, [r3, #0]
				break;
 80004ae:	e017      	b.n	80004e0 <ap_main+0x110>

			case RUN:
				if (Button_GetState(&hBtnMode) == ACT_PUSHED) mode_state = CLOCK_MODE;
 80004b0:	4814      	ldr	r0, [pc, #80]	@ (8000504 <ap_main+0x134>)
 80004b2:	f000 f884 	bl	80005be <Button_GetState>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d103      	bne.n	80004c4 <ap_main+0xf4>
 80004bc:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <ap_main+0x12c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = STOP;
				break;
 80004c2:	e00f      	b.n	80004e4 <ap_main+0x114>
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = STOP;
 80004c4:	4813      	ldr	r0, [pc, #76]	@ (8000514 <ap_main+0x144>)
 80004c6:	f000 f87a 	bl	80005be <Button_GetState>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d109      	bne.n	80004e4 <ap_main+0x114>
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <ap_main+0x140>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
				break;
 80004d6:	e005      	b.n	80004e4 <ap_main+0x114>

			case CLEAR:
				stopwatch_state = STOP;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <ap_main+0x140>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
				break;
 80004de:	e002      	b.n	80004e6 <ap_main+0x116>
				break;
 80004e0:	bf00      	nop
 80004e2:	e000      	b.n	80004e6 <ap_main+0x116>
				break;
 80004e4:	bf00      	nop
			}
			FND_WtireData(getStopWatchDataReform(),dotData);
 80004e6:	f7ff ff49 	bl	800037c <getStopWatchDataReform>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4619      	mov	r1, r3
 80004f2:	4610      	mov	r0, r2
 80004f4:	f000 f9d6 	bl	80008a4 <FND_WtireData>
			break;
 80004f8:	bf00      	nop
		dotData = 0b0000;
 80004fa:	e76e      	b.n	80003da <ap_main+0xa>
 80004fc:	200000b4 	.word	0x200000b4
 8000500:	20000000 	.word	0x20000000
 8000504:	2000009c 	.word	0x2000009c
 8000508:	200000a8 	.word	0x200000a8
 800050c:	51eb851f 	.word	0x51eb851f
 8000510:	200000b0 	.word	0x200000b0
 8000514:	20000084 	.word	0x20000084
 8000518:	20000090 	.word	0x20000090

0800051c <ap_init>:
	}
	return 0;
}

void ap_init()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	SystemClock_Init();	// led clock 설정
 8000520:	f000 fabc 	bl	8000a9c <SystemClock_Init>
	LedBar_Init(); // led pin 설정
 8000524:	f000 fa6e 	bl	8000a04 <LedBar_Init>
	Button_Init(&hBtnRunStop, GPIOB, 5);
 8000528:	2205      	movs	r2, #5
 800052a:	4912      	ldr	r1, [pc, #72]	@ (8000574 <ap_init+0x58>)
 800052c:	4812      	ldr	r0, [pc, #72]	@ (8000578 <ap_init+0x5c>)
 800052e:	f000 f82b 	bl	8000588 <Button_Init>
	Button_Init(&hBtnClear, GPIOB, 3);
 8000532:	2203      	movs	r2, #3
 8000534:	490f      	ldr	r1, [pc, #60]	@ (8000574 <ap_init+0x58>)
 8000536:	4811      	ldr	r0, [pc, #68]	@ (800057c <ap_init+0x60>)
 8000538:	f000 f826 	bl	8000588 <Button_Init>
	Button_Init(&hBtnMode, GPIOA, 10);
 800053c:	220a      	movs	r2, #10
 800053e:	4910      	ldr	r1, [pc, #64]	@ (8000580 <ap_init+0x64>)
 8000540:	4810      	ldr	r0, [pc, #64]	@ (8000584 <ap_init+0x68>)
 8000542:	f000 f821 	bl	8000588 <Button_Init>
	FND_Init();
 8000546:	f000 f975 	bl	8000834 <FND_Init>
	TIM_Init(TIM2, 16-1, 1000-1);
 800054a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800054e:	210f      	movs	r1, #15
 8000550:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000554:	f000 fae3 	bl	8000b1e <TIM_Init>
	TIM_CntStart(TIM2);
 8000558:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800055c:	f000 faf5 	bl	8000b4a <TIM_CntStart>
	TIM_UIEnable(TIM2);
 8000560:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000564:	f000 fb01 	bl	8000b6a <TIM_UIEnable>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000568:	201c      	movs	r0, #28
 800056a:	f7ff fe35 	bl	80001d8 <__NVIC_EnableIRQ>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020400 	.word	0x40020400
 8000578:	20000084 	.word	0x20000084
 800057c:	20000090 	.word	0x20000090
 8000580:	40020000 	.word	0x40020000
 8000584:	2000009c 	.word	0x2000009c

08000588 <Button_Init>:
#include "Button.h"

enum {PUSHED=0, RELEASED};

void Button_Init(Button_Handler_t *hbtn, GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	hbtn->GPIOx = GPIOx;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	601a      	str	r2, [r3, #0]
	hbtn->pinNum = pinNum;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
	hbtn->prevState = RELEASED;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2201      	movs	r2, #1
 80005a4:	609a      	str	r2, [r3, #8]

	GPIO_Init(hbtn->GPIOx, hbtn->pinNum, INPUT);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 f9bb 	bl	800092c <GPIO_Init>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <Button_GetState>:

button_state_t Button_GetState(Button_Handler_t *hbtn)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	uint32_t curState;
	curState = GPIO_ReadPin(hbtn->GPIOx, hbtn->pinNum);	// normal state is high.
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4610      	mov	r0, r2
 80005d2:	f000 fa00 	bl	80009d6 <GPIO_ReadPin>
 80005d6:	60f8      	str	r0, [r7, #12]

	if ((hbtn->prevState == RELEASED) && (curState == PUSHED)){ // button released -> pushed
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d10a      	bne.n	80005f6 <Button_GetState+0x38>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d107      	bne.n	80005f6 <Button_GetState+0x38>
		delay(2); // debounce
 80005e6:	2002      	movs	r0, #2
 80005e8:	f000 fa7a 	bl	8000ae0 <delay>
		hbtn->prevState = PUSHED;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00f      	b.n	8000616 <Button_GetState+0x58>
	}
	else if ((hbtn->prevState == PUSHED) && (curState == RELEASED)){ // button pushed -> released
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10a      	bne.n	8000614 <Button_GetState+0x56>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d107      	bne.n	8000614 <Button_GetState+0x56>
		delay(2); // debounce
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fa6b 	bl	8000ae0 <delay>
		hbtn->prevState = RELEASED;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8000610:	2302      	movs	r3, #2
 8000612:	e000      	b.n	8000616 <Button_GetState+0x58>
	}
	return NO_ACT;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <FND_Decode>:

static uint16_t fndDisplayNum = 0; // fnd main data(max 9999)
static uint16_t dotPos = 0b0000;

int FND_Decode(int digitPos)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    switch (digitPos) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d84d      	bhi.n	80006ca <FND_Decode+0xaa>
 800062e:	a201      	add	r2, pc, #4	@ (adr r2, 8000634 <FND_Decode+0x14>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	0800065f 	.word	0x0800065f
 800063c:	08000683 	.word	0x08000683
 8000640:	080006a7 	.word	0x080006a7
    case DIGIT1:
        return fndDisplayNum % 10;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <FND_Decode+0xb8>)
 8000646:	881a      	ldrh	r2, [r3, #0]
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <FND_Decode+0xbc>)
 800064a:	fba3 1302 	umull	r1, r3, r3, r2
 800064e:	08d9      	lsrs	r1, r3, #3
 8000650:	460b      	mov	r3, r1
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	b29b      	uxth	r3, r3
 800065c:	e036      	b.n	80006cc <FND_Decode+0xac>
    case DIGIT10:
        return fndDisplayNum / 10 % 10;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <FND_Decode+0xb8>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	4a1e      	ldr	r2, [pc, #120]	@ (80006dc <FND_Decode+0xbc>)
 8000664:	fba2 2303 	umull	r2, r3, r2, r3
 8000668:	08db      	lsrs	r3, r3, #3
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <FND_Decode+0xbc>)
 800066e:	fba3 1302 	umull	r1, r3, r3, r2
 8000672:	08d9      	lsrs	r1, r3, #3
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	b29b      	uxth	r3, r3
 8000680:	e024      	b.n	80006cc <FND_Decode+0xac>
    case DIGIT100:
        return fndDisplayNum / 100 % 10;
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <FND_Decode+0xb8>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <FND_Decode+0xc0>)
 8000688:	fba2 2303 	umull	r2, r3, r2, r3
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <FND_Decode+0xbc>)
 8000692:	fba3 1302 	umull	r1, r3, r3, r2
 8000696:	08d9      	lsrs	r1, r3, #3
 8000698:	460b      	mov	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	e012      	b.n	80006cc <FND_Decode+0xac>
    case DIGIT1000:
        return fndDisplayNum / 1000 % 10;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <FND_Decode+0xb8>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <FND_Decode+0xc4>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	099b      	lsrs	r3, r3, #6
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <FND_Decode+0xbc>)
 80006b6:	fba3 1302 	umull	r1, r3, r3, r2
 80006ba:	08d9      	lsrs	r1, r3, #3
 80006bc:	460b      	mov	r3, r1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	440b      	add	r3, r1
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	e000      	b.n	80006cc <FND_Decode+0xac>
    default:
    }
    return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200000c0 	.word	0x200000c0
 80006dc:	cccccccd 	.word	0xcccccccd
 80006e0:	51eb851f 	.word	0x51eb851f
 80006e4:	10624dd3 	.word	0x10624dd3

080006e8 <FND_DisOffAll>:

void FND_DisOffAll()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e005      	b.n	8000700 <FND_DisOffAll+0x18>
        FND_DisOff(i);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f80b 	bl	8000710 <FND_DisOff>
    for (int i = 0; i < 4; ++i) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b03      	cmp	r3, #3
 8000704:	ddf6      	ble.n	80006f4 <FND_DisOffAll+0xc>
    }
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <FND_DisOff>:

void FND_DisOff(int pos)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    GPIO_WritePin(FND_cmm[pos].GPIO, FND_cmm[pos].pinNum, PIN_RESET);
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <FND_DisOff+0x2c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <FND_DisOff+0x2c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	4413      	add	r3, r2
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	f000 f92e 	bl	800098e <GPIO_WritePin>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <FND_DisOn>:

void FND_DisOn(int pos)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    GPIO_WritePin(FND_cmm[pos].GPIO, FND_cmm[pos].pinNum, PIN_SET);
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <FND_DisOn+0x2c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <FND_DisOn+0x2c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	4413      	add	r3, r2
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f000 f916 	bl	800098e <GPIO_WritePin>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <FND_printDot>:

void FND_printDot(uint32_t digitPos){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(dotPos & (1U << digitPos)) GPIO_WritePin(FND_seg[7].GPIO, FND_seg[7].pinNum, PIN_RESET);
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <FND_printDot+0x34>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	fa22 f303 	lsr.w	r3, r2, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d007      	beq.n	800079c <FND_printDot+0x2c>
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <FND_printDot+0x38>)
 800078e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000790:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <FND_printDot+0x38>)
 8000792:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000794:	2200      	movs	r2, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8f9 	bl	800098e <GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000c2 	.word	0x200000c2
 80007a8:	20000028 	.word	0x20000028

080007ac <FND_PrintDigit>:

void FND_PrintDigit(int digit)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    const uint8_t segFont[10] = {
 80007b4:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <FND_PrintDigit+0x80>)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80007bc:	c303      	stmia	r3!, {r0, r1}
 80007be:	801a      	strh	r2, [r3, #0]
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F // 9
    };
    for (int i = 0; i < 8; ++i) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	e02a      	b.n	800081c <FND_PrintDigit+0x70>
        if (!(segFont[digit] & (1 << i)))
 80007c6:	f107 0208 	add.w	r2, r7, #8
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa42 f303 	asr.w	r3, r2, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10d      	bne.n	80007fc <FND_PrintDigit+0x50>
            GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_SET);
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <FND_PrintDigit+0x84>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007e8:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <FND_PrintDigit+0x84>)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4413      	add	r3, r2
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2201      	movs	r2, #1
 80007f4:	4619      	mov	r1, r3
 80007f6:	f000 f8ca 	bl	800098e <GPIO_WritePin>
 80007fa:	e00c      	b.n	8000816 <FND_PrintDigit+0x6a>
        else
            GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_RESET);
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <FND_PrintDigit+0x84>)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <FND_PrintDigit+0x84>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	f000 f8bc 	bl	800098e <GPIO_WritePin>
    for (int i = 0; i < 8; ++i) {
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	2b07      	cmp	r3, #7
 8000820:	ddd1      	ble.n	80007c6 <FND_PrintDigit+0x1a>
    }
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	08000cc0 	.word	0x08000cc0
 8000830:	20000028 	.word	0x20000028

08000834 <FND_Init>:

/////public/////
// initializing FND
void FND_Init()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e00f      	b.n	8000860 <FND_Init+0x2c>
        GPIO_Init(FND_cmm[i].GPIO, FND_cmm[i].pinNum, OUTPUT);
 8000840:	4a16      	ldr	r2, [pc, #88]	@ (800089c <FND_Init+0x68>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000848:	4a14      	ldr	r2, [pc, #80]	@ (800089c <FND_Init+0x68>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	4413      	add	r3, r2
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	f000 f869 	bl	800092c <GPIO_Init>
    for (int i = 0; i < 4; ++i) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b03      	cmp	r3, #3
 8000864:	ddec      	ble.n	8000840 <FND_Init+0xc>
    }
    for (int i = 0; i < 8; ++i) {
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	e00f      	b.n	800088c <FND_Init+0x58>
        GPIO_Init(FND_seg[i].GPIO, FND_seg[i].pinNum, OUTPUT);
 800086c:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <FND_Init+0x6c>)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <FND_Init+0x6c>)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4413      	add	r3, r2
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	f000 f853 	bl	800092c <GPIO_Init>
    for (int i = 0; i < 8; ++i) {
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b07      	cmp	r3, #7
 8000890:	ddec      	ble.n	800086c <FND_Init+0x38>
    }
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000028 	.word	0x20000028

080008a4 <FND_WtireData>:

// Write FndData
void FND_WtireData(uint32_t data, uint32_t dotPosition)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    fndDisplayNum = data;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <FND_WtireData+0x28>)
 80008b4:	801a      	strh	r2, [r3, #0]
    dotPos = dotPosition;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <FND_WtireData+0x2c>)
 80008bc:	801a      	strh	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200000c0 	.word	0x200000c0
 80008d0:	200000c2 	.word	0x200000c2

080008d4 <FND_DisplayData>:
    return fndDisplayNum;
}

// Display FndData
void FND_DisplayData()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    static int digitPos = DIGIT1;
    uint8_t digitD = FND_Decode(digitPos);
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <FND_DisplayData+0x54>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe9e 	bl	8000620 <FND_Decode>
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
    // 인터럽트 발생시 한 자리씩 출력
    FND_DisOffAll();
 80008e8:	f7ff fefe 	bl	80006e8 <FND_DisOffAll>
    FND_PrintDigit(digitD);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff5c 	bl	80007ac <FND_PrintDigit>
    FND_printDot(digitPos);
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <FND_DisplayData+0x54>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff39 	bl	8000770 <FND_printDot>
    FND_DisOn(digitPos);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <FND_DisplayData+0x54>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff1c 	bl	8000740 <FND_DisOn>
    digitPos = (digitPos + 1) % 4;
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <FND_DisplayData+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	425a      	negs	r2, r3
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	f002 0203 	and.w	r2, r2, #3
 8000918:	bf58      	it	pl
 800091a:	4253      	negpl	r3, r2
 800091c:	4a02      	ldr	r2, [pc, #8]	@ (8000928 <FND_DisplayData+0x54>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200000c4 	.word	0x200000c4

0800092c <GPIO_Init>:
 */
#include "GPIO.h"


void GPIO_Init(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_mode_t pinMode)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	71fb      	strb	r3, [r7, #7]
	if (pinMode == OUTPUT) {
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d115      	bne.n	800096c <GPIO_Init+0x40>
		GPIOx->MODER |= (0x01U << (pinNum*2));
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	431a      	orrs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]
		GPIOx->MODER &= ~(0x02U << (pinNum*2));
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	2102      	movs	r1, #2
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	401a      	ands	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	601a      	str	r2, [r3, #0]
	}
	else {
		GPIOx->MODER &= ~(0x03U << pinNum*2);
	}
}
 800096a:	e00a      	b.n	8000982 <GPIO_Init+0x56>
		GPIOx->MODER &= ~(0x03U << pinNum*2);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2103      	movs	r1, #3
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	401a      	ands	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef *GPIOx, uint32_t pinNum, pin_state_t pinState)
{
 800098e:	b480      	push	{r7}
 8000990:	b085      	sub	sp, #20
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	4613      	mov	r3, r2
 800099a:	71fb      	strb	r3, [r7, #7]
	if (pinState == PIN_SET) {
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d109      	bne.n	80009b6 <GPIO_WritePin+0x28>
		GPIOx->ODR |= (1U << pinNum);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	2101      	movs	r1, #1
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	431a      	orrs	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	615a      	str	r2, [r3, #20]
	}
	else {
		GPIOx->ODR &= ~(1U << pinNum);
	}
}
 80009b4:	e009      	b.n	80009ca <GPIO_WritePin+0x3c>
		GPIOx->ODR &= ~(1U << pinNum);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	695a      	ldr	r2, [r3, #20]
 80009ba:	2101      	movs	r1, #1
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	fa01 f303 	lsl.w	r3, r1, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	401a      	ands	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	615a      	str	r2, [r3, #20]
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <GPIO_ReadPin>:

uint32_t GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint32_t pinNum)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
//	return !((GPIOx->IDR & (1<<pinNum)) == 0);
	return ((GPIOx->IDR & (1<<pinNum)) ? 1 : 0);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2101      	movs	r1, #1
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LedBar_Init>:
		{GPIOC, 2},
		{GPIOC, 3}
};

void LedBar_Init()
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0


	GPIO_Init(GPIOA, 0, OUTPUT);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <LedBar_Init+0x58>)
 8000a0e:	f7ff ff8d 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOA, 1, OUTPUT);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2101      	movs	r1, #1
 8000a16:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <LedBar_Init+0x58>)
 8000a18:	f7ff ff88 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOA, 4, OUTPUT);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2104      	movs	r1, #4
 8000a20:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <LedBar_Init+0x58>)
 8000a22:	f7ff ff83 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOB, 0, OUTPUT);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <LedBar_Init+0x5c>)
 8000a2c:	f7ff ff7e 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOC, 1, OUTPUT);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2101      	movs	r1, #1
 8000a34:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <LedBar_Init+0x60>)
 8000a36:	f7ff ff79 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOC, 0, OUTPUT);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <LedBar_Init+0x60>)
 8000a40:	f7ff ff74 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOC, 2, OUTPUT);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2102      	movs	r1, #2
 8000a48:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <LedBar_Init+0x60>)
 8000a4a:	f7ff ff6f 	bl	800092c <GPIO_Init>
	GPIO_Init(GPIOC, 3, OUTPUT);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2103      	movs	r1, #3
 8000a52:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <LedBar_Init+0x60>)
 8000a54:	f7ff ff6a 	bl	800092c <GPIO_Init>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800

08000a68 <getTick>:
#include "SysTick.h"

static uint32_t tick=0;

uint32_t getTick()
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	return tick;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	@ (8000a7c <getTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200000c8 	.word	0x200000c8

08000a80 <incTick>:

void incTick()
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	tick++;
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <incTick+0x18>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <incTick+0x18>)
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	200000c8 	.word	0x200000c8

08000a9c <SystemClock_Init>:
 */

#include "SystemClock.h"

void SystemClock_Init()
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <SystemClock_Init+0x40>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <SystemClock_Init+0x40>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <SystemClock_Init+0x40>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <SystemClock_Init+0x40>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <SystemClock_Init+0x40>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <SystemClock_Init+0x40>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <SystemClock_Init+0x40>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <SystemClock_Init+0x40>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <delay>:

void delay(int loop)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	for(int j=0; j<loop; j++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e00c      	b.n	8000b08 <delay+0x28>
		for(int i = 0; i < 1000; i++){}
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e002      	b.n	8000afa <delay+0x1a>
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b00:	dbf8      	blt.n	8000af4 <delay+0x14>
	for(int j=0; j<loop; j++){
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbee      	blt.n	8000aee <delay+0xe>
	}
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <TIM_Init>:


#include "TIM.h"

void TIM_Init(TIM_TypeDef *TIMx, uint32_t psc, uint32_t arr)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
	TIM_WritePSC(TIMx, psc);
 8000b2a:	68b9      	ldr	r1, [r7, #8]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 f83a 	bl	8000ba6 <TIM_WritePSC>
	TIM_WriteARR(TIMx, arr);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f844 	bl	8000bc2 <TIM_WriteARR>
	TIM_WriteCNT(TIMx, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f824 	bl	8000b8a <TIM_WriteCNT>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <TIM_CntStart>:

void TIM_CntStart(TIM_TypeDef *TIMx)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	TIMx->CR1 |= 1<<0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f043 0201 	orr.w	r2, r3, #1
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <TIM_UIEnable>:
{
	TIMx->CR1 &= ~(1<<0);
}

void TIM_UIEnable(TIM_TypeDef *TIMx)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	TIMx->DIER |= 1<<0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f043 0201 	orr.w	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60da      	str	r2, [r3, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <TIM_WriteCNT>:
{
	return TIMx->CNT;
}

void TIM_WriteCNT(TIM_TypeDef *TIMx, uint32_t cnt)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	TIMx->CNT = cnt;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <TIM_WritePSC>:
{
	return TIMx->PSC;
}

void TIM_WritePSC(TIM_TypeDef *TIMx, uint32_t psc)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	TIMx->PSC = psc;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <TIM_WriteARR>:
{
	return TIMx->ARR;
}

void TIM_WriteARR(TIM_TypeDef *TIMx, uint32_t arr)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	TIMx->ARR = arr;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	683a      	ldr	r2, [r7, #0]
 8000bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <TIM_ClearUIFlag>:

void TIM_ClearUIFlag(TIM_TypeDef *TIMx)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
	TIMx->SR &= ~(1<<0);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	f023 0201 	bic.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	611a      	str	r2, [r3, #16]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <main>:

#include <stdint.h>
#include "ap_main.h"

int main(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
    ap_init();
 8000c02:	f7ff fc8b 	bl	800051c <ap_init>
    while(1)
    {
    	ap_main();
 8000c06:	f7ff fbe3 	bl	80003d0 <ap_main>
 8000c0a:	e7fc      	b.n	8000c06 <main+0x8>

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 f811 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff ffde 	bl	8000bfe <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c50:	08000cd4 	.word	0x08000cd4
  ldr r2, =_sbss
 8000c54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c58:	200000cc 	.word	0x200000cc

08000c5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4d0d      	ldr	r5, [pc, #52]	@ (8000c98 <__libc_init_array+0x38>)
 8000c64:	4c0d      	ldr	r4, [pc, #52]	@ (8000c9c <__libc_init_array+0x3c>)
 8000c66:	1b64      	subs	r4, r4, r5
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	4d0b      	ldr	r5, [pc, #44]	@ (8000ca0 <__libc_init_array+0x40>)
 8000c72:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca4 <__libc_init_array+0x44>)
 8000c74:	f000 f818 	bl	8000ca8 <_init>
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	42a6      	cmp	r6, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c88:	4798      	blx	r3
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c92:	4798      	blx	r3
 8000c94:	3601      	adds	r6, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	08000ccc 	.word	0x08000ccc
 8000c9c:	08000ccc 	.word	0x08000ccc
 8000ca0:	08000ccc 	.word	0x08000ccc
 8000ca4:	08000cd0 	.word	0x08000cd0

08000ca8 <_init>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr

08000cb4 <_fini>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr
