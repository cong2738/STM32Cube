/*
 * ap_main.c
 *
 *  Created on: Jun 19, 2025
 *      Author: kccistc
 */

#include "ap_main.h"

Button_Handler_t hBtnRunStop;
Button_Handler_t hBtnClear;
Button_Handler_t hBtnMode;

enum {
	CLOCK_MODE,
	STOPWATCH_MODE
}WATCH_MODE_E;

enum {
	STOP,
	RUN,
	CLEAR
}STOP_WATCH_STATE_E;

void TIM2_IRQHandler(void)
{
	incTick();
	FND_DisplayData();
	TIM_ClearUIFlag(TIM2);
}

typedef struct {
	uint8_t hour;
	uint8_t min;
	uint8_t sec;
	uint32_t msec;
} ClockTime;

ClockTime clock = {12, 0, 0, 0}; // 12.00으로 시작

ClockTime stopwatch = {0, 0, 0, 0};

int stopwatch_state = STOP;
int mode_state = CLOCK_MODE;

void Clock()
{
	static uint32_t prevCounterTime = 0;
	clock.msec = getTick() - prevCounterTime;
	if (clock.msec >= 1000) {
		prevCounterTime = getTick();
		clock.sec++;
		if (clock.sec >= 60) {
			clock.sec=0;
			clock.min++;
		}
		if (clock.min >= 60) {
			clock.min=0;
			clock.hour=(clock.hour+1)%24;
		}
	}
}

void Stopwatch()
{
	static uint32_t prevCounterTime = 0;
	// 동작
	switch (stopwatch_state) {
	case STOP:
		prevCounterTime = getTick();
		break;

	case RUN:
		stopwatch.msec = getTick() - prevCounterTime;
		if ((stopwatch.msec) >= 1000) {
			prevCounterTime = getTick();
			stopwatch.sec++;
			if (stopwatch.sec>=60) {
				stopwatch.sec = 0;
				stopwatch.min++;
			}
		}
		break;

	case CLEAR:
		stopwatch.min = 0;
		stopwatch.sec = 0;
		stopwatch.msec = 0;
		break;
	}
}

int ap_main()
{
	int dotData = 0;
	int clock_showData = clock.hour*100+stopwatch.min;
	int stopwatch_showData = stopwatch.min/10*1000+stopwatch.sec*10+stopwatch.msec/100;
	while (1)
	{
		dotData = 0b0000;
		Clock();
		Stopwatch();

		switch (mode_state) {
		case CLOCK_MODE:
			clock_showData = clock.hour*100+stopwatch.sec;
			if(clock.msec >= 500){
				dotData |= (1U<<2);
			}
			if (Button_GetState(&hBtnMode) == ACT_PUSHED) {
				mode_state = STOPWATCH_MODE;
			}
			FND_WtireData(clock_showData, dotData);
			break;

		case STOPWATCH_MODE:
			stopwatch_showData = stopwatch.min/10*1000+stopwatch.sec*10+stopwatch.msec/100;
			if(stopwatch.msec % 100 >= 50){
				dotData |= (1U<<1);
			}
			if(stopwatch.msec >= 500){
				dotData |= (1U<<3);
			}
			// 상태천이ap
			switch (stopwatch_state)
			{
			case STOP:
				if (Button_GetState(&hBtnMode) == ACT_PUSHED) mode_state = CLOCK_MODE;
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = RUN;
				else if (Button_GetState(&hBtnClear) == ACT_PUSHED) stopwatch_state = CLEAR;
				break;

			case RUN:
				if (Button_GetState(&hBtnMode) == ACT_PUSHED) mode_state = CLOCK_MODE;
				else if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) stopwatch_state = STOP;
				break;

			case CLEAR:
				stopwatch_state = STOP;
				break;
			}
			FND_WtireData(stopwatch_showData,dotData);
			break;
		}

	}
	return 0;
}

void ap_init()
{
	SystemClock_Init();	// led clock 설정
	LedBar_Init(); // led pin 설정
	Button_Init(&hBtnRunStop, GPIOB, 5);
	Button_Init(&hBtnClear, GPIOB, 3);
	Button_Init(&hBtnMode, GPIOA, 10);
	FND_Init();
	TIM_Init(TIM2, 16-1, 1000-1);
	TIM_CntStart(TIM2);
	TIM_UIEnable(TIM2);
	NVIC_EnableIRQ(TIM2_IRQn);
}
