/*
 * Listener.c
 *
 *  Created on: Jun 24, 2025
 *      Author: kccistc
 */

#include "Listener.h"
#include <string.h>
#include "Button.h"
#include "usart.h"

static void Listener_CheckButton();
static void Listener_CheckUART();

static char rxData[1];
static uint8_t uartRxFlag = 0;

void Listener_Init()
{
	Button_Init(&hBtnMode, GPIOB, GPIO_PIN_5);
	Button_Init(&hBtnRunStop, GPIOB, GPIO_PIN_3);
	Button_Init(&hBtnClear, GPIOA, GPIO_PIN_10);
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxData, 1); // uart recv interrupt enable(UART IT initializing)
}

void Listener_Excute()
{
	Listener_CheckButton();
	Listener_CheckUART();
}

void Listener_CheckButton() { // check button state
	static uint32_t chkBtnTime = 0;
	uint32_t curTick = HAL_GetTick();

	if(curTick - chkBtnTime < 10) return;
	chkBtnTime = curTick;

	inputData_TypeDef inputData;

	if (Button_GetState(&hBtnMode)== ACT_RELEASED) {
		inputData.id = controlId_MODE;
		inputData.data = controlData_MODE_ACT;
		Controller_SetInputData(inputData);
		return;
	}
	if (Button_GetState(&hBtnRunStop)== ACT_PUSHED) {
		inputData.id = controlId_RUN_STOP;
		inputData.data = controlData_STOPWATCH_ACT;
		Controller_SetInputData(inputData);
		return;
	}
	if (Button_GetState(&hBtnClear)== ACT_PUSHED) {
		inputData.id = controlId_BTN_CLEAR;
		inputData.data = controlData_STOPWATCH_ACT;
		Controller_SetInputData(inputData);
		return;
	}
}

void Listener_CheckUART() { // check UART rxData
	if(!uartRxFlag) return; // check UART rxFlag
	uartRxFlag = 0; // disalble rxFlag

	inputData_TypeDef inputData;

	if (rxData[0] == 'm') {
		inputData.id = controlId_MODE;
		inputData.data = controlData_MODE_ACT;
		Controller_SetInputData(inputData);
		return;
	}
	if (rxData[0] == 'r') {
		inputData.id = controlId_RUN_STOP;
		inputData.data = controlData_STOPWATCH_ACT;
		Controller_SetInputData(inputData);
		return;
	}
	if (rxData[0] == 's') {
		inputData.id = controlId_RUN_STOP;
		inputData.data = controlData_STOPWATCH_ACT;
		Controller_SetInputData(inputData);
		return;
	}
	if (rxData[0] == 'c') {
		inputData.id = controlId_BTN_CLEAR;
		inputData.data = controlData_STOPWATCH_ACT;
		Controller_SetInputData(inputData);
		return;
	}
}

void Listener_UartCallBack() {
	uartRxFlag = 1;
	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxData, 1);  //interrupt en
}
