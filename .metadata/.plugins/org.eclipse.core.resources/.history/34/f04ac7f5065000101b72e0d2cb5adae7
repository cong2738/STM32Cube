/*
 * StopWatch.c
 *
 *  Created on: Jun 23, 2025
 *      Author: kccistc
 */

#include "StopWatch.h"

///// private /////
void StopWatch_IncTime() ;
void StopWatch_Stop();
void StopWatch_Run();
void StopWatch_Clear();

Button_Handler_t hBtnMode1;
Button_Handler_t hBtnRunStop1;
Button_Handler_t hBtnClear1;

typedef enum {STOP,RUN,CLEAR} STOPWATCH_STATE;

typedef struct {
	uint16_t msec;
	uint8_t sec;
	uint8_t min;
	uint8_t hour;
}stopatch_t;

stopatch_t stopWatch = {0,0,0,0};
static STOPWATCH_STATE stopwatch_state = STOP;


void StopWatch_IncTime() {
	if(stopWatch.msec < 1000) {
		stopWatch.msec++;
		return;
	}
	stopWatch.msec = 0;

	if(stopWatch.sec < 60 - 1) {
		stopWatch.sec++;
		return;
	}
	stopWatch.sec = 0;

	if(stopWatch.min < 60 - 1) {
		stopWatch.min++;
		return;
	}
	stopWatch.min = 0;

	if(stopWatch.hour < 24 - 1) {
		stopWatch.hour++;
		return;
	}
	stopWatch.hour = 0;
}

void StopWatch_Stop(){
	if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
		stopwatch_state = STOP;
	} else if(Button_GetState(&hBtnClear) == ACT_PUSHED) {
		stopwatch_state = CLEAR;
	}
	FND_WtireData((stopWatch.min%10*1000) + (stopWatch.sec * 10) + (stopWatch.msec/100), 0b0000);
}
void StopWatch_Run(){
	if (Button_GetState(&hBtnRunStop) == ACT_PUSHED) {
		stopwatch_state = RUN;
	}
	FND_WtireData((stopWatch.min%10*1000) + (stopWatch.sec * 10) + (stopWatch.msec/100), 0b0000);
}
void StopWatch_Clear(){
	stopwatch_state = STOP;
	stopwatch_state = 0;
	FND_WtireData((stopWatch.min%10*1000) + (stopWatch.sec * 10) + (stopWatch.msec/100), 0b0000);
}

///// public /////
void StopWatchButton_Init(Button_Handler_t Mode, Button_Handler_t RunStop, Button_Handler_t Clear){
	hBtnMode = Mode;
	hBtnRunStop = RunStop;
	hBtnClear = Clear;
}

void StopWatch_IncTimeCallBack() {
	if(stopwatch_state != RUN) return;

	StopWatch_IncTime();
}

void StopWatch_Excute() {
	switch (stopwatch_state) {
	case STOP:
		StopWatch_Stop();
		break;
	case RUN:
		StopWatch_Run();
		break;
	case CLEAR:
		StopWatch_Clear();
		break;
	}
}
