/*
 * FND.c
 *
 *  Created on: Jun 20, 2025
 *      Author: kccistc
 */


#include "FND.h"

void FND_DisOff();
void FND_DisOn(int pos);
void FND_DisDigit(int digit, int data);

typedef struct{
	GPIO_TypeDef* GPIO;
	uint32_t pinNum;
} SEG_GPIO_Type;

SEG_GPIO_Type FND_cmm[4] = {
		{GPIOC,8},
		{GPIOC,6},
		{GPIOC,5},
		{GPIOA,12}
};

SEG_GPIO_Type FND_seg[8] = {
		{GPIOA,11},   //A
		{GPIOB,12},   //B
		{GPIOB,2},    //C
		{GPIOB,1},    //D
		{GPIOB,15},   //E
		{GPIOB,14},   //F
		{GPIOB,13},   //G
		{GPIOC,4}     //DP
};

enum {DIGIT1,DIGIT10,DIGIT100,DIGIT1000};

uint16_t fndDisplayNum = 0; // fnd main data(max 9999)

/////public/////
// Write FndData
void FND_WtireData(uint32_t data){
	fndDisplayNum = data;
}


// Read FndData
uint16_t FND_ReadData(){
	return fndDisplayNum;
}

// Display FndData
void FND_DisplayData(){
	static int digitPos = DIGIT1;
	// 인터럽트 발생시 한 자리씩 출력
	FND_DisOff();
	switch (digitPos) {
	case DIGIT1:
		FND_DisDigit(fndDisplayNum%10);
		break;
	case DIGIT10:
		FND_DisDigit(fndDisplayNum/10%10);
		break;
	case DIGIT100:
		FND_DisDigit(fndDisplayNum/100%10);
		break;
	case DIGIT1000:
		FND_DisDigit(fndDisplayNum/1000%10);
		break;
	default:
		break;
	}
	FND_DisOn(digitPos);
	digitPos = (digitPos + 1) % 4;
}

void FND_DisOff(){
	for (int i = 0; i < 4; ++i) {
		GPIO_WritePin(FND_cmm[i].GPIO, FND_cmm[i].pinNum, PIN_SET);
	}
}
void FND_DisOn(int pos){
	GPIO_WritePin(FND_cmm[pos].GPIO, FND_cmm[pos].pinNum, PIN_RESET);
}
void FND_DisDigit(int digit, int data){
	for (int i = 0; i < 8; ++i) {
		if(!(data&(1<<i))){

			GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_SET);
		} else GPIO_WritePin(FND_seg[i].GPIO, FND_seg[i].pinNum, PIN_RESET);
	}
}
